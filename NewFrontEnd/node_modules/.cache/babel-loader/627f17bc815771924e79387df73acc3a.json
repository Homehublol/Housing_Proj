{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/basics/Input.tsx\";\nimport React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\n\nconst Input = ({\n  label,\n  labelClassName = '',\n  error,\n  errorClassName = '',\n  inlinePostText,\n  postTextClassName = '',\n  required,\n  className = '',\n  readOnly,\n  onChange,\n  isInvalid,\n  isValid,\n  value,\n  children,\n  ...formControlProps\n}) => {\n  const [isEmpty, setIsEmpty] = useState(!value || value === '');\n  return /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, (label || required) && /*#__PURE__*/React.createElement(Form.Label, {\n    className: `input-label ${labelClassName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, label, required && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-required-asterisk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 24\n    }\n  }, \" *\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, Object.assign({}, formControlProps, {\n    value: value,\n    className: (isEmpty && !readOnly ? 'input-unfilled ' : 'input-filled ') + (readOnly ? 'input-readonly' : '') + ((isInvalid || error) && !readOnly ? 'input-invalid ' : '') + className,\n    isValid: !readOnly && isValid,\n    readOnly: readOnly,\n    onChange: e => {\n      setIsEmpty(!e.target.value || e.target.value === '');\n\n      if (onChange) {\n        onChange(e);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })), inlinePostText && /*#__PURE__*/React.createElement(\"div\", {\n    className: `input-inline-text ${postTextClassName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, inlinePostText)), children, error && /*#__PURE__*/React.createElement(Form.Label, {\n    className: `input-error ${errorClassName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, error));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/basics/Input.tsx"],"names":["React","useState","Form","Input","label","labelClassName","error","errorClassName","inlinePostText","postTextClassName","required","className","readOnly","onChange","isInvalid","isValid","value","children","formControlProps","isEmpty","setIsEmpty","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAuC,iBAAvC;;AAmBA,MAAMC,KAA2B,GAAG,CAAC;AACnCC,EAAAA,KADmC;AAEnCC,EAAAA,cAAc,GAAG,EAFkB;AAGnCC,EAAAA,KAHmC;AAInCC,EAAAA,cAAc,GAAG,EAJkB;AAKnCC,EAAAA,cALmC;AAMnCC,EAAAA,iBAAiB,GAAG,EANe;AAOnCC,EAAAA,QAPmC;AAQnCC,EAAAA,SAAS,GAAG,EARuB;AASnCC,EAAAA,QATmC;AAUnCC,EAAAA,QAVmC;AAWnCC,EAAAA,SAXmC;AAYnCC,EAAAA,OAZmC;AAanCC,EAAAA,KAbmC;AAcnCC,EAAAA,QAdmC;AAenC,KAAGC;AAfgC,CAAD,KAgB9B;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAU,CAACe,KAAD,IAAUA,KAAK,KAAK,EAA9B,CAAtC;AAEA,sBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACZ,KAAK,IAAIM,QAAV,kBACC,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAG,eAAcL,cAAe,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KADH,EAEGM,QAAQ,iBAAI;AAAM,IAAA,SAAS,EAAC,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFf,CAFJ,eAOE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,OAAN,oBACMQ,gBADN;AAEE,IAAA,KAAK,EAAEF,KAFT;AAGE,IAAA,SAAS,EACP,CAACG,OAAO,IAAI,CAACP,QAAZ,GAAuB,iBAAvB,GAA2C,eAA5C,KACCA,QAAQ,GAAG,gBAAH,GAAsB,EAD/B,KAEC,CAACE,SAAS,IAAIR,KAAd,KAAwB,CAACM,QAAzB,GAAoC,gBAApC,GAAuD,EAFxD,IAGAD,SAPJ;AASE,IAAA,OAAO,EAAE,CAACC,QAAD,IAAaG,OATxB;AAUE,IAAA,QAAQ,EAAEH,QAVZ;AAWE,IAAA,QAAQ,EAAGS,CAAD,IAAO;AACfD,MAAAA,UAAU,CAAC,CAACC,CAAC,CAACC,MAAF,CAASN,KAAV,IAAmBK,CAAC,CAACC,MAAF,CAASN,KAAT,KAAmB,EAAvC,CAAV;;AACA,UAAIH,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACQ,CAAD,CAAR;AACD;AACF,KAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAoBGb,cAAc,iBACb;AAAK,IAAA,SAAS,EAAG,qBAAoBC,iBAAkB,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,cADH,CArBJ,CAPF,EAkCGS,QAlCH,EAoCGX,KAAK,iBACJ,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAG,eAAcC,cAAe,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KADH,CArCJ,CADF;AA4CD,CA/DD;;AAiEA,eAAeH,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Form, FormControlProps } from 'react-bootstrap';\nimport * as z from 'zod';\n\nexport interface InputProps\n  extends FormControlProps,\n    Omit<\n      React.HTMLAttributes<HTMLInputElement | HTMLTextAreaElement>,\n      'onChange'\n    > {\n  label?: string;\n  labelClassName?: string;\n  error?: string | z.ZodIssue; // Will make the input border red as well\n  errorClassName?: string;\n  inlinePostText?: string;\n  postTextClassName?: string;\n  required?: boolean;\n  rows?: number; // TODO should be in the html attributes of htmltextareaelement???\n}\n\nconst Input: React.FC<InputProps> = ({\n  label,\n  labelClassName = '',\n  error,\n  errorClassName = '',\n  inlinePostText,\n  postTextClassName = '',\n  required,\n  className = '',\n  readOnly,\n  onChange,\n  isInvalid,\n  isValid,\n  value,\n  children,\n  ...formControlProps\n}) => {\n  const [isEmpty, setIsEmpty] = useState<boolean>(!value || value === '');\n\n  return (\n    <Form.Group>\n      {(label || required) && (\n        <Form.Label className={`input-label ${labelClassName}`}>\n          {label}\n          {required && <span className=\"input-required-asterisk\"> *</span>}\n        </Form.Label>\n      )}\n      <div className=\"d-flex\">\n        <Form.Control\n          {...formControlProps}\n          value={value}\n          className={\n            (isEmpty && !readOnly ? 'input-unfilled ' : 'input-filled ') +\n            (readOnly ? 'input-readonly' : '') +\n            ((isInvalid || error) && !readOnly ? 'input-invalid ' : '') +\n            className\n          }\n          isValid={!readOnly && isValid}\n          readOnly={readOnly}\n          onChange={(e) => {\n            setIsEmpty(!e.target.value || e.target.value === '');\n            if (onChange) {\n              onChange(e);\n            }\n          }}\n        />\n\n        {inlinePostText && (\n          <div className={`input-inline-text ${postTextClassName}`}>\n            {inlinePostText}\n          </div>\n        )}\n      </div>\n\n      {children}\n\n      {error && (\n        <Form.Label className={`input-error ${errorClassName}`}>\n          {error}\n        </Form.Label>\n      )}\n    </Form.Group>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}