{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/GoogleMap.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { mapIcons } from '../assets/icons/all';\n\nconst MapPin = () => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    marginLeft: '-17px',\n    marginTop: '-46px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(mapIcons.mapPin, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }\n})));\n\nconst GoogleMap = ({\n  address\n}) => {\n  const [center, setCenter] = useState({\n    lat: 32.8801,\n    lng: -117.234\n  }); // TODO this is no good. We need to have a loading symbol in the map when this is not set. Solution: Keep track of when the center is set from useEffect (use a var with useState). If it hasn't been set yet, then instead of showing the mapPin, show the loading gif\n\n  const [zoom, setZoom] = useState(12);\n  useEffect(() => {\n    // Mounted is needed for React (not always necessary). You can only update a component's\n    // state when it is mounted -- we potentially set the state after it is already unmounted\n    // because of the async calls. Thus, we need to check if it is mounted before updating the state\n    let mounted = true; // function that gets and sets the map pin\n\n    const setMapPin = async () => {\n      const code = await geocodeByAddress(address);\n      const location = await getLatLng(code[0]);\n      if (mounted) setCenter(location);\n    };\n\n    setMapPin();\n    return () => {\n      mounted = false;\n    };\n  }, [address, setCenter]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"google-map-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: 'AIzaSyDP7ZDv6xGzfVe7y7Sgb3MsYMqCVLNljeY'\n    } // TODO put key in an .env\n    ,\n    center: center,\n    defaultZoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MapPin, {\n    lat: center.lat,\n    lng: center.lng,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default GoogleMap;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/GoogleMap.tsx"],"names":["React","useEffect","useState","GoogleMapReact","geocodeByAddress","getLatLng","mapIcons","MapPin","marginLeft","marginTop","GoogleMap","address","center","setCenter","lat","lng","zoom","setZoom","mounted","setMapPin","code","location","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAAuC,kBAAvC;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,2BAA5C;AACA,SAASC,QAAT,QAAyB,qBAAzB;;AAEA,MAAMC,MAAwB,GAAG,mBAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAK,EAAA,KAAK,EAAE;AAAEC,IAAAA,UAAU,EAAE,OAAd;AAAuBC,IAAAA,SAAS,EAAE;AAAlC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,QAAD,CAAU,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF;;AAYA,MAAMC,SAA8B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACtD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAS;AAAEY,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE,CAAC;AAAtB,GAAT,CAApC,CADsD,CACyB;;AAC/E,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA,QAAIiB,OAAO,GAAG,IAAd,CAJc,CAMd;;AACA,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,IAAI,GAAG,MAAMhB,gBAAgB,CAACO,OAAD,CAAnC;AACA,YAAMU,QAAQ,GAAG,MAAMhB,SAAS,CAACe,IAAI,CAAC,CAAD,CAAL,CAAhC;AACA,UAAIF,OAAJ,EAAaL,SAAS,CAACQ,QAAD,CAAT;AACd,KAJD;;AAKAF,IAAAA,SAAS;AAET,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACP,OAAD,EAAUE,SAAV,CAjBM,CAAT;AAmBA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAE;AAAES,MAAAA,GAAG,EAAE;AAAP,KADpB,CACwE;AADxE;AAEE,IAAA,MAAM,EAAEV,MAFV;AAGE,IAAA,WAAW,EAAEI,IAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEJ,MAAM,CAACE,GAApB;AAAyB,IAAA,GAAG,EAAEF,MAAM,CAACG,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF;AAWD,CAlCD;;AAoCA,eAAeL,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport GoogleMapReact, { Coords } from 'google-map-react';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { mapIcons } from '../assets/icons/all';\n\nconst MapPin: React.FC<Coords> = () => (\n  <div>\n    <div style={{ marginLeft: '-17px', marginTop: '-46px' }}>\n      <mapIcons.mapPin />\n    </div>\n  </div>\n);\n\ninterface PathProps {\n  address: string;\n}\n\nconst GoogleMap: React.FC<PathProps> = ({ address }) => {\n  const [center, setCenter] = useState<Coords>({ lat: 32.8801, lng: -117.234 }); // TODO this is no good. We need to have a loading symbol in the map when this is not set. Solution: Keep track of when the center is set from useEffect (use a var with useState). If it hasn't been set yet, then instead of showing the mapPin, show the loading gif\n  const [zoom, setZoom] = useState(12);\n\n  useEffect(() => {\n    // Mounted is needed for React (not always necessary). You can only update a component's\n    // state when it is mounted -- we potentially set the state after it is already unmounted\n    // because of the async calls. Thus, we need to check if it is mounted before updating the state\n    let mounted = true;\n\n    // function that gets and sets the map pin\n    const setMapPin = async () => {\n      const code = await geocodeByAddress(address);\n      const location = await getLatLng(code[0]);\n      if (mounted) setCenter(location);\n    };\n    setMapPin();\n\n    return () => {\n      mounted = false;\n    };\n  }, [address, setCenter]);\n\n  return (\n    <div className=\"google-map-wrapper\">\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: 'AIzaSyDP7ZDv6xGzfVe7y7Sgb3MsYMqCVLNljeY' }} // TODO put key in an .env\n        center={center}\n        defaultZoom={zoom}\n      >\n        <MapPin lat={center.lat} lng={center.lng} />\n      </GoogleMapReact>\n    </div>\n  );\n};\n\nexport default GoogleMap;\n"]},"metadata":{},"sourceType":"module"}