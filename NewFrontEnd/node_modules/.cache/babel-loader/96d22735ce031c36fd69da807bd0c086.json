{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getHousingPostsAPI, searchHousingPostsAPI } from '../../apis';\nimport { addHousingBookmarkAPI, getHousingBookmarksAPI, newHousingPostAPI, removeHousingBookmarkAPI } from '../../apis/housing'; // TODO probably split up this housing slice into several folders, where thunks are in a\n// folder, selectors in another, reducers in another, and then export them and import\n// them to here\n// TODO move this to a different file\n\nexport let SearchingMode;\n\n(function (SearchingMode) {\n  SearchingMode[SearchingMode[\"NOT_SEARCHING\"] = 0] = \"NOT_SEARCHING\";\n  SearchingMode[SearchingMode[\"STARTED\"] = 1] = \"STARTED\";\n  SearchingMode[SearchingMode[\"FINISHED\"] = 2] = \"FINISHED\";\n})(SearchingMode || (SearchingMode = {}));\n\nconst initialState = {\n  posts: undefined,\n  favorites: undefined,\n  searching: SearchingMode.NOT_SEARCHING\n};\nexport const housingSlice = createSlice({\n  name: 'housing',\n  initialState,\n  reducers: {\n    setHousingPosts: (state, action) => {\n      state.posts = action.payload;\n    },\n    appendToHousingPosts: (state, action) => {\n      if (state.posts) {\n        state.posts.push(...action.payload);\n      } else {\n        state.posts = action.payload;\n      }\n    },\n    setHousingFavorites: (state, action) => {\n      state.favorites = {};\n\n      if (action.payload) {\n        action.payload.forEach(housePost => {\n          if (state.favorites) state.favorites[housePost.roomId] = housePost;\n        });\n      }\n    },\n    addToHousingFavorites: (state, action) => {\n      if (!state.favorites) state.favorites = {};\n      state.favorites[action.payload.roomId] = action.payload;\n    },\n    // Pass in the HousePost ID (temporarily use the function defined above)\n    removeFromHousingFavorites: (state, action) => {\n      if (state.favorites) {\n        delete state.favorites[action.payload];\n      }\n    },\n    setSearchingMode: (state, action) => {\n      state.searching = action.payload;\n    }\n  }\n}); // export the reducers that should be accessible by outside files\n\nexport const {} = housingSlice.actions; // do NOT export these reducers. Only declare them and use them in the THUNKS\n\nconst {\n  setHousingPosts,\n  appendToHousingPosts,\n  setHousingFavorites,\n  addToHousingFavorites,\n  removeFromHousingFavorites,\n  setSearchingMode\n} = housingSlice.actions; // PUT THUNKS HERE\n\nexport const getHousingPosts = () => async dispatch => {\n  // get the housing and then set the housing in redux\n  const housingPosts = await getHousingPostsAPI();\n  dispatch(setHousingPosts(housingPosts));\n};\nexport const searchHousingPosts = housePost => async (dispatch) => {\n  try {\n    dispatch(setSearchingMode(SearchingMode.STARTED));\n    const searchResults = await searchHousingPostsAPI(housePost);\n    dispatch(setHousingPosts(searchResults));\n    dispatch(setSearchingMode(SearchingMode.FINISHED));\n    console.log(SearchingMode.FINISHED);\n  } catch (err) {\n    // handle error\n    console.error(err);\n  }\n};\nexport const newHousingPost = housePost => async (dispatch) => {\n  const result = await newHousingPostAPI(housePost);\n\n  if (result) {// dispatch(appendToHousingPosts([housePost]));\n  } else {// handle the error\n    }\n};\nexport const getHousingFavorites = () => async dispatch => {\n  const favorites = await getHousingBookmarksAPI();\n\n  if (favorites) {\n    dispatch(setHousingFavorites(favorites));\n  } else {// handle errors here\n  }\n};\nexport const newHousingFavorite = housePost => async (dispatch) => {\n  // TODO eventually change the housePost in here to just be the housePostId\n  const result = await addHousingBookmarkAPI(housePost.roomId);\n\n  if (result) {\n    dispatch(addToHousingFavorites(housePost));\n  } else {// handle error here\n  }\n};\nexport const removeHousingFavorite = roomId => async (dispatch) => {\n  const result = await removeHousingBookmarkAPI(roomId);\n\n  if (result) {\n    dispatch(removeFromHousingFavorites(roomId));\n  } else {// handle error here\n  }\n}; // SELECTORS HERE\n\nexport const selectHousingPosts = state => state.housing.posts;\nexport const selectHousingSearchMode = state => state.housing.searching;\nexport const selectHousingFavorites = state => state.housing.favorites;\nexport default housingSlice.reducer;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/redux/slices/housing.ts"],"names":["createSlice","getHousingPostsAPI","searchHousingPostsAPI","addHousingBookmarkAPI","getHousingBookmarksAPI","newHousingPostAPI","removeHousingBookmarkAPI","SearchingMode","initialState","posts","undefined","favorites","searching","NOT_SEARCHING","housingSlice","name","reducers","setHousingPosts","state","action","payload","appendToHousingPosts","push","setHousingFavorites","forEach","housePost","roomId","addToHousingFavorites","removeFromHousingFavorites","setSearchingMode","actions","getHousingPosts","dispatch","housingPosts","searchHousingPosts","STARTED","searchResults","FINISHED","console","log","err","error","newHousingPost","result","getHousingFavorites","newHousingFavorite","removeHousingFavorite","selectHousingPosts","housing","selectHousingSearchMode","selectHousingFavorites","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getHousingPostsAPI, searchHousingPostsAPI } from '../../apis';\nimport { HousePost } from '../../assets/models/PostModels';\nimport { FilterModel } from '../../assets/models/FilterModel';\nimport { AppThunk, RootState } from '../store';\nimport {\n  addHousingBookmarkAPI,\n  getHousingBookmarksAPI,\n  newHousingPostAPI,\n  removeHousingBookmarkAPI,\n} from '../../apis/housing';\n\n// TODO probably split up this housing slice into several folders, where thunks are in a\n// folder, selectors in another, reducers in another, and then export them and import\n// them to here\n\n// TODO move this to a different file\nexport enum SearchingMode {\n  NOT_SEARCHING,\n  STARTED,\n  FINISHED,\n}\n\ninterface HousingState {\n  posts?: HousePost[]; // TODO change this to be a object from the housepost's id to the housepost, then change favorites to be id: boolean\n  // TODO eventually do this: searchResults?: HousePost[];     and have a 'SearchResultsLoading' boolean\n  favorites?: { [id: string]: HousePost };\n  searching: SearchingMode;\n}\n\nconst initialState: HousingState = {\n  posts: undefined,\n  favorites: undefined,\n  searching: SearchingMode.NOT_SEARCHING,\n};\n\nexport const housingSlice = createSlice({\n  name: 'housing',\n  initialState,\n  reducers: {\n    setHousingPosts: (\n      state,\n      action: PayloadAction<HousePost[] | undefined>,\n    ) => {\n      state.posts = action.payload;\n    },\n    appendToHousingPosts: (state, action: PayloadAction<HousePost[]>) => {\n      if (state.posts) {\n        state.posts.push(...action.payload);\n      } else {\n        state.posts = action.payload;\n      }\n    },\n    setHousingFavorites: (\n      state,\n      action: PayloadAction<HousePost[] | undefined>,\n    ) => {\n      state.favorites = {};\n\n      if (action.payload) {\n        action.payload.forEach((housePost) => {\n          if (state.favorites) state.favorites[housePost.roomId] = housePost;\n        });\n      }\n    },\n    addToHousingFavorites: (state, action: PayloadAction<HousePost>) => {\n      if (!state.favorites) state.favorites = {};\n\n      state.favorites[action.payload.roomId] = action.payload;\n    },\n    // Pass in the HousePost ID (temporarily use the function defined above)\n    removeFromHousingFavorites: (state, action: PayloadAction<number>) => {\n      if (state.favorites) {\n        delete state.favorites[action.payload];\n      }\n    },\n    setSearchingMode: (state, action: PayloadAction<SearchingMode>) => {\n      state.searching = action.payload;\n    },\n  },\n});\n\n// export the reducers that should be accessible by outside files\nexport const {} = housingSlice.actions;\n// do NOT export these reducers. Only declare them and use them in the THUNKS\nconst {\n  setHousingPosts,\n  appendToHousingPosts,\n  setHousingFavorites,\n  addToHousingFavorites,\n  removeFromHousingFavorites,\n  setSearchingMode,\n} = housingSlice.actions;\n\n// PUT THUNKS HERE\nexport const getHousingPosts = (): AppThunk => async (dispatch) => {\n  // get the housing and then set the housing in redux\n  const housingPosts = await getHousingPostsAPI();\n  dispatch(setHousingPosts(housingPosts));\n};\n\nexport const searchHousingPosts = (housePost: FilterModel): AppThunk => async (\n  dispatch,\n) => {\n  try {\n    dispatch(setSearchingMode(SearchingMode.STARTED));\n    const searchResults = await searchHousingPostsAPI(housePost);\n    dispatch(setHousingPosts(searchResults));\n    dispatch(setSearchingMode(SearchingMode.FINISHED));\n    console.log(SearchingMode.FINISHED);\n  } catch (err) {\n    // handle error\n    console.error(err);\n  }\n};\n\nexport const newHousingPost = (housePost: HousePost): AppThunk => async (\n  dispatch,\n) => {\n  const result = await newHousingPostAPI(housePost);\n  if (result) {\n    // dispatch(appendToHousingPosts([housePost]));\n  } else {\n    // handle the error\n  }\n};\n\nexport const getHousingFavorites = (): AppThunk => async (dispatch) => {\n  const favorites = await getHousingBookmarksAPI();\n  if (favorites) {\n    dispatch(setHousingFavorites(favorites));\n  } else {\n    // handle errors here\n  }\n};\n\nexport const newHousingFavorite = (housePost: HousePost): AppThunk => async (\n  dispatch,\n) => {\n  // TODO eventually change the housePost in here to just be the housePostId\n  const result = await addHousingBookmarkAPI(housePost.roomId);\n  if (result) {\n    dispatch(addToHousingFavorites(housePost));\n  } else {\n    // handle error here\n  }\n};\n\nexport const removeHousingFavorite = (roomId: number): AppThunk => async (\n  dispatch,\n) => {\n  const result = await removeHousingBookmarkAPI(roomId);\n  if (result) {\n    dispatch(removeFromHousingFavorites(roomId));\n  } else {\n    // handle error here\n  }\n};\n\n// SELECTORS HERE\nexport const selectHousingPosts = (state: RootState) => state.housing.posts;\nexport const selectHousingSearchMode = (state: RootState) =>\n  state.housing.searching;\nexport const selectHousingFavorites = (state: RootState) =>\n  state.housing.favorites;\n\nexport default housingSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}