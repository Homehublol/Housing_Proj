{"ast":null,"code":"import { intervalOptions, yearMonths } from '../constants';\n/**\n * Use to define at least one of some type\n */\n\n/**\n * Function used to validate move in select form\n * @param earlyMonth - the early month selected\n * @param earlyInterval - the early interval selected\n * @param lateMonth - the late month selected\n * @param lateInterval - the late interval selected\n */\nconst moveInSelect = (earlyMonth, earlyInterval, lateMonth, lateInterval) => {\n  if (yearMonths.indexOf(earlyMonth) > yearMonths.indexOf(lateMonth)) {\n    // neither has anytime as the option\n    if (![earlyMonth, lateMonth].includes(yearMonths[0])) {\n      return false;\n    }\n  }\n\n  if (yearMonths.indexOf(earlyMonth) === yearMonths.indexOf(lateMonth) && ![earlyMonth, lateMonth].includes(yearMonths[0])) {\n    // neither has anytime as the option\n    if (![earlyInterval, lateInterval].includes(intervalOptions[0]) && intervalOptions.indexOf(earlyInterval) > intervalOptions.indexOf(lateInterval)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Use to abbreviate a month\n * @param month - the month to abbreviate (must be in the enum 'months')\n */\n\n\nconst abbreviateMonth = month => MonthsUnabrvToAbrv[month];\n/**\n * Use to abbreviate address to only everything before the first comma\n */\n\n\nconst abbreviateAddress = address => address.split(',')[0];\n/**\n * Use to remove parentheses and everything inside the parentheses\n */\n\n\nconst removeParentheses = str => str.replace(/ *\\([^)]*\\) */g, '');\n/**\n * Use to abbreviate moveIn string\n */\n\n\nconst abbreviateMoveIn = (earlyInt, earlyMonth, lateInt, lateMonth) => {\n  // 1st pass: anytime from\n  if (earlyInt === 'Anytime') {\n    earlyInt = 'Early';\n  } // 2nd pass: anytime to\n\n\n  if (lateInt === 'Anytime') {\n    lateInt = 'Late';\n  }\n\n  if (earlyMonth === lateMonth) {\n    // 3rd pass: duplicates, or early - late\n    if (earlyInt === lateInt) {\n      return `${earlyInt} ${abbreviateMonth(earlyMonth)}`;\n    }\n\n    if (earlyInt === 'Early' && lateInt === 'Late') {\n      return `${abbreviateMonth(earlyMonth)}`;\n    }\n  }\n\n  return `${earlyInt} ${abbreviateMonth(earlyMonth)} - ${lateInt} ${abbreviateMonth(lateMonth)}`;\n};\n\nexport { moveInSelect, abbreviateMonth, abbreviateAddress, removeParentheses, abbreviateMoveIn };","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/assets/utils/index.tsx"],"names":["intervalOptions","yearMonths","moveInSelect","earlyMonth","earlyInterval","lateMonth","lateInterval","indexOf","includes","abbreviateMonth","month","MonthsUnabrvToAbrv","abbreviateAddress","address","split","removeParentheses","str","replace","abbreviateMoveIn","earlyInt","lateInt"],"mappings":"AAAA,SACEA,eADF,EAIEC,UAJF,QAMO,cANP;AAQA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CACnBC,UADmB,EAEnBC,aAFmB,EAGnBC,SAHmB,EAInBC,YAJmB,KAKP;AACZ,MAAIL,UAAU,CAACM,OAAX,CAAmBJ,UAAnB,IAAiCF,UAAU,CAACM,OAAX,CAAmBF,SAAnB,CAArC,EAAoE;AAClE;AACA,QAAI,CAAC,CAACF,UAAD,EAAaE,SAAb,EAAwBG,QAAxB,CAAiCP,UAAU,CAAC,CAAD,CAA3C,CAAL,EAAsD;AACpD,aAAO,KAAP;AACD;AACF;;AACD,MACEA,UAAU,CAACM,OAAX,CAAmBJ,UAAnB,MAAmCF,UAAU,CAACM,OAAX,CAAmBF,SAAnB,CAAnC,IACA,CAAC,CAACF,UAAD,EAAaE,SAAb,EAAwBG,QAAxB,CAAiCP,UAAU,CAAC,CAAD,CAA3C,CAFH,EAGE;AACA;AACA,QACE,CAAC,CAACG,aAAD,EAAgBE,YAAhB,EAA8BE,QAA9B,CAAuCR,eAAe,CAAC,CAAD,CAAtD,CAAD,IACAA,eAAe,CAACO,OAAhB,CAAwBH,aAAxB,IACEJ,eAAe,CAACO,OAAhB,CAAwBD,YAAxB,CAHJ,EAIE;AACA,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CA1BD;AA4BA;AACA;AACA;AACA;;;AACA,MAAMG,eAAe,GAAIC,KAAD,IAA8BC,kBAAkB,CAACD,KAAD,CAAxE;AAEA;AACA;AACA;;;AACA,MAAME,iBAAiB,GAAIC,OAAD,IAA6BA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAvD;AAEA;AACA;AACA;;;AACA,MAAMC,iBAAiB,GAAIC,GAAD,IACxBA,GAAG,CAACC,OAAJ,CAAY,gBAAZ,EAA8B,EAA9B,CADF;AAGA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,CACvBC,QADuB,EAEvBhB,UAFuB,EAGvBiB,OAHuB,EAIvBf,SAJuB,KAKZ;AACX;AACA,MAAIc,QAAQ,KAAK,SAAjB,EAA4B;AAC1BA,IAAAA,QAAQ,GAAG,OAAX;AACD,GAJU,CAKX;;;AACA,MAAIC,OAAO,KAAK,SAAhB,EAA2B;AACzBA,IAAAA,OAAO,GAAG,MAAV;AACD;;AACD,MAAIjB,UAAU,KAAKE,SAAnB,EAA8B;AAC5B;AACA,QAAIc,QAAQ,KAAKC,OAAjB,EAA0B;AACxB,aAAQ,GAAED,QAAS,IAAGV,eAAe,CAACN,UAAD,CAAa,EAAlD;AACD;;AACD,QAAIgB,QAAQ,KAAK,OAAb,IAAwBC,OAAO,KAAK,MAAxC,EAAgD;AAC9C,aAAQ,GAAEX,eAAe,CAACN,UAAD,CAAa,EAAtC;AACD;AACF;;AACD,SAAQ,GAAEgB,QAAS,IAAGV,eAAe,CACnCN,UADmC,CAEnC,MAAKiB,OAAQ,IAAGX,eAAe,CAACJ,SAAD,CAAY,EAF7C;AAGD,CA1BD;;AA4BA,SACEH,YADF,EAEEO,eAFF,EAGEG,iBAHF,EAIEG,iBAJF,EAKEG,gBALF","sourcesContent":["import {\n  intervalOptions,\n  MonthAbrv,\n  monthsUnabrvToAbrv,\n  yearMonths,\n  Month,\n} from '../constants';\n\n/**\n * Use to define at least one of some type\n */\nexport type AtLeastOne<T> = { 0: T } & T[];\n\n/**\n * Function used to validate move in select form\n * @param earlyMonth - the early month selected\n * @param earlyInterval - the early interval selected\n * @param lateMonth - the late month selected\n * @param lateInterval - the late interval selected\n */\nconst moveInSelect = (\n  earlyMonth: string,\n  earlyInterval: string,\n  lateMonth: string,\n  lateInterval: string,\n): boolean => {\n  if (yearMonths.indexOf(earlyMonth) > yearMonths.indexOf(lateMonth)) {\n    // neither has anytime as the option\n    if (![earlyMonth, lateMonth].includes(yearMonths[0])) {\n      return false;\n    }\n  }\n  if (\n    yearMonths.indexOf(earlyMonth) === yearMonths.indexOf(lateMonth) &&\n    ![earlyMonth, lateMonth].includes(yearMonths[0])\n  ) {\n    // neither has anytime as the option\n    if (\n      ![earlyInterval, lateInterval].includes(intervalOptions[0]) &&\n      intervalOptions.indexOf(earlyInterval) >\n        intervalOptions.indexOf(lateInterval)\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Use to abbreviate a month\n * @param month - the month to abbreviate (must be in the enum 'months')\n */\nconst abbreviateMonth = (month: Month): MonthsAbrv => MonthsUnabrvToAbrv[month];\n\n/**\n * Use to abbreviate address to only everything before the first comma\n */\nconst abbreviateAddress = (address: string): string => address.split(',')[0];\n\n/**\n * Use to remove parentheses and everything inside the parentheses\n */\nconst removeParentheses = (str: string): string =>\n  str.replace(/ *\\([^)]*\\) */g, '');\n\n/**\n * Use to abbreviate moveIn string\n */\nconst abbreviateMoveIn = (\n  earlyInt: string,\n  earlyMonth: months,\n  lateInt: string,\n  lateMonth: months,\n): string => {\n  // 1st pass: anytime from\n  if (earlyInt === 'Anytime') {\n    earlyInt = 'Early';\n  }\n  // 2nd pass: anytime to\n  if (lateInt === 'Anytime') {\n    lateInt = 'Late';\n  }\n  if (earlyMonth === lateMonth) {\n    // 3rd pass: duplicates, or early - late\n    if (earlyInt === lateInt) {\n      return `${earlyInt} ${abbreviateMonth(earlyMonth)}`;\n    }\n    if (earlyInt === 'Early' && lateInt === 'Late') {\n      return `${abbreviateMonth(earlyMonth)}`;\n    }\n  }\n  return `${earlyInt} ${abbreviateMonth(\n    earlyMonth,\n  )} - ${lateInt} ${abbreviateMonth(lateMonth)}`;\n};\n\nexport {\n  moveInSelect,\n  abbreviateMonth,\n  abbreviateAddress,\n  removeParentheses,\n  abbreviateMoveIn,\n};\n"]},"metadata":{},"sourceType":"module"}