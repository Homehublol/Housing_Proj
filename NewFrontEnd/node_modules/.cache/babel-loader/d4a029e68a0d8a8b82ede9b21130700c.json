{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/GoogleMap.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap as GoogleMapAPI, withGoogleMap, Marker } from 'react-google-maps';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { mapIcons } from '../assets/icons/all';\n\nconst MapPin = () => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    marginLeft: '-17px',\n    marginTop: '-46px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(mapIcons.mapPin, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }\n})));\n\nconst GoogleMap = ({\n  address,\n  className = 'google-map-wrapper'\n}) => {\n  const [center, setCenter] = useState({\n    lat: 32.8801,\n    lng: -117.234\n  }); // TODO this is no good. We need to have a loading symbol in the map when this is not set. Solution: Keep track of when the center is set from useEffect (use a var with useState). If it hasn't been set yet, then instead of showing the mapPin, show the loading gif\n\n  const [zoom, setZoom] = useState(12);\n  useEffect(() => {\n    // Mounted is needed for React (not always necessary). You can only update a component's\n    // state when it is mounted -- we potentially set the state after it is already unmounted\n    // because of the async calls. Thus, we need to check if it is mounted before updating the state\n    let mounted = true; // function that gets and sets the map pin\n\n    const setMapPin = async () => {\n      const code = await geocodeByAddress(address);\n      const location = await getLatLng(code[0]);\n      if (mounted) setCenter(location);\n    };\n\n    setMapPin();\n    return () => {\n      mounted = false;\n    };\n  }, [address, setCenter]);\n  const GoogleMapRender = withGoogleMap(() => /*#__PURE__*/React.createElement(GoogleMapAPI, {\n    center: center,\n    defaultZoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: center,\n    icon: {\n      url: '../assets/icons/map/mapPin.svg'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMapRender, {\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `100%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 27\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `100%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default GoogleMap;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/GoogleMap.tsx"],"names":["React","useEffect","useState","GoogleMap","GoogleMapAPI","withGoogleMap","Marker","geocodeByAddress","getLatLng","mapIcons","MapPin","marginLeft","marginTop","address","className","center","setCenter","lat","lng","zoom","setZoom","mounted","setMapPin","code","location","GoogleMapRender","url","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAS,IAAIC,YAAtB,EAAoCC,aAApC,EAAoDC,MAApD,QAAiE,mBAAjE;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,2BAA5C;AACA,SAASC,QAAT,QAA+B,qBAA/B;;AAOA,MAAMC,MAAwB,GAAG,mBAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAK,EAAA,KAAK,EAAE;AAAEC,IAAAA,UAAU,EAAE,OAAd;AAAuBC,IAAAA,SAAS,EAAE;AAAlC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,QAAD,CAAU,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF;;AAaA,MAAMT,SAA8B,GAAG,CAAC;AACtCU,EAAAA,OADsC;AAEtCC,EAAAA,SAAS,GAAG;AAF0B,CAAD,KAGjC;AACJ,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAS;AAAEe,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE,CAAC;AAAtB,GAAT,CAApC,CADI,CAC2E;;AAC/E,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA,QAAIoB,OAAO,GAAG,IAAd,CAJc,CAMd;;AACA,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,IAAI,GAAG,MAAMhB,gBAAgB,CAACM,OAAD,CAAnC;AACA,YAAMW,QAAQ,GAAG,MAAMhB,SAAS,CAACe,IAAI,CAAC,CAAD,CAAL,CAAhC;AACA,UAAIF,OAAJ,EAAaL,SAAS,CAACQ,QAAD,CAAT;AACd,KAJD;;AAKAF,IAAAA,SAAS;AAET,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACR,OAAD,EAAUG,SAAV,CAjBM,CAAT;AAkBA,QAAMS,eAAe,GAAGpB,aAAa,CAAC,mBACpC,oBAAC,YAAD;AAAc,IAAA,MAAM,EAAEU,MAAtB;AAA8B,IAAA,WAAW,EAAEI,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,MAAD;AACA,IAAA,QAAQ,EAAEJ,MADV;AAEA,IAAA,IAAI,EAAE;AAACW,MAAAA,GAAG,EAAC;AAAL,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADmC,CAArC;AASA,sBACE;AAAK,IAAA,SAAS,EAAEZ,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,gBAAgB,eAAE;AAAK,MAAA,KAAK,EAAE;AAAEa,QAAAA,MAAM,EAAG;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpB;AAEE,IAAA,UAAU,eAAE;AAAK,MAAA,KAAK,EAAE;AAAEA,QAAAA,MAAM,EAAG;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CA1CD;;AA4CA,eAAexB,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap as GoogleMapAPI, withGoogleMap,  Marker} from 'react-google-maps';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { mapIcons, Icon } from '../assets/icons/all';\n\ninterface Coords {\n  lat: number;\n  lng: number;\n}\n\nconst MapPin: React.FC<Coords> = () => (\n  <div>\n    <div style={{ marginLeft: '-17px', marginTop: '-46px' }}>\n      <mapIcons.mapPin />\n    </div>\n  </div>\n);\n\ninterface PathProps {\n  address: string;\n  className?: string;\n}\n\nconst GoogleMap: React.FC<PathProps> = ({\n  address,\n  className = 'google-map-wrapper',\n}) => {\n  const [center, setCenter] = useState<Coords>({ lat: 32.8801, lng: -117.234 }); // TODO this is no good. We need to have a loading symbol in the map when this is not set. Solution: Keep track of when the center is set from useEffect (use a var with useState). If it hasn't been set yet, then instead of showing the mapPin, show the loading gif\n  const [zoom, setZoom] = useState(12);\n\n  useEffect(() => {\n    // Mounted is needed for React (not always necessary). You can only update a component's\n    // state when it is mounted -- we potentially set the state after it is already unmounted\n    // because of the async calls. Thus, we need to check if it is mounted before updating the state\n    let mounted = true;\n\n    // function that gets and sets the map pin\n    const setMapPin = async () => {\n      const code = await geocodeByAddress(address);\n      const location = await getLatLng(code[0]);\n      if (mounted) setCenter(location);\n    };\n    setMapPin();\n\n    return () => {\n      mounted = false;\n    };\n  }, [address, setCenter]);\n  const GoogleMapRender = withGoogleMap(() => (\n    <GoogleMapAPI center={center} defaultZoom={zoom}>\n      {/* <MapPin position={center} /> */}\n      <Marker\n      position={center}\n      icon={{url:'../assets/icons/map/mapPin.svg'}}\n    />\n    </GoogleMapAPI>\n  ));\n  return (\n    <div className={className}>\n      <GoogleMapRender\n        containerElement={<div style={{ height: `100%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    </div>\n  );\n};\n\nexport default GoogleMap;\n"]},"metadata":{},"sourceType":"module"}