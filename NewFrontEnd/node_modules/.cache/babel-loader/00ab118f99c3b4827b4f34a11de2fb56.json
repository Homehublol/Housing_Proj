{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/Login.tsx\";\nimport React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { GoogleLogin } from 'react-google-login';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectUser, login } from '../redux/slices/auth'; // https://developers.google.com/identity/sign-in/web/sign-in\n\nconst Login = ({\n  handleClose,\n  show\n}) => {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  const isOnline = response => {\n    return 'profileObj' in response;\n  };\n\n  const responseGoogleSuccess = response => {\n    if (isOnline(response)) {\n      const profile = response.profileObj;\n      dispatch(login(profile.name, profile.email));\n    } else {\n      console.log('User is offline');\n      console.log(response);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: \"LoginModal\",\n    show: show,\n    onHide: handleClose,\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"d-block\",\n    src: \"/close.svg\",\n    alt: \"Close\",\n    onClick: () => handleClose(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"d-block\",\n    src: \"/login.svg\",\n    alt: \"LogIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), user ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"word\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \" Logged In using Redux as \", user.name, \"! \") // lil' test here\n  :\n  /*#__PURE__*/\n  React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(GoogleLogin, {\n    className: \"g-auth\",\n    clientId: \"778916194800-977823s60p7mtu1sj72ru0922p2pqh6m.apps.googleusercontent.com\",\n    onSuccess: response => {\n      responseGoogleSuccess(response);\n      handleClose();\n    },\n    onFailure: response => console.log(response) // TODO: add login cookie to onSuccess using universal-cookie\n    ,\n    cookiePolicy: \"single_host_origin\",\n    icon: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"d-block\",\n    src: \"/loginButton.svg\",\n    alt: \"LogInButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/Login.tsx"],"names":["React","Modal","Button","GoogleLogin","useSelector","useDispatch","selectUser","login","Login","handleClose","show","user","dispatch","isOnline","response","responseGoogleSuccess","profile","profileObj","name","email","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SACEC,WADF,QAIO,oBAJP;AAKA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,sBAAlC,C,CAEA;;AAMA,MAAMC,KAA0B,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA2B;AAC5D,QAAMC,IAAI,GAAGP,WAAW,CAACE,UAAD,CAAxB;AACA,QAAMM,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,QAAQ,GACZC,QADe,IAEqB;AACpC,WAAO,gBAAgBA,QAAvB;AACD,GAJD;;AAMA,QAAMC,qBAAqB,GACzBD,QAD4B,IAEzB;AACH,QAAID,QAAQ,CAACC,QAAD,CAAZ,EAAwB;AACtB,YAAME,OAAO,GAAGF,QAAQ,CAACG,UAAzB;AACAL,MAAAA,QAAQ,CAACL,KAAK,CAACS,OAAO,CAACE,IAAT,EAAeF,OAAO,CAACG,KAAvB,CAAN,CAAR;AACD,KAHD,MAGO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACD;AACF,GAVD;;AAYA,sBACE,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAEJ,IAA7B;AAAmC,IAAA,MAAM,EAAED,WAA3C;AAAwD,IAAA,QAAQ,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,SADZ;AAEE,IAAA,GAAG,EAAC,YAFN;AAGE,IAAA,GAAG,EAAC,OAHN;AAIE,IAAA,OAAO,EAAE,MAAMA,WAAW,EAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eASE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,GAAG,EAAC,YAA7B;AAA0C,IAAA,GAAG,EAAC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAUGE,IAAI,gBACH;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAkDA,IAAI,CAACO,IAAvD,OADG,CACmE;AADnE;AAAA;AAGH,2CAbJ,eAeE,oBAAC,WAAD;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,QAAQ,EAAC,0EAFX;AAGE,IAAA,SAAS,EAAGJ,QAAD,IAAc;AACvBC,MAAAA,qBAAqB,CAACD,QAAD,CAArB;AACAL,MAAAA,WAAW;AACZ,KANH;AAOE,IAAA,SAAS,EAAGK,QAAD,IAAcM,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAP3B,CAQE;AARF;AASE,IAAA,YAAY,EAAC,oBATf;AAUE,IAAA,IAAI,EAAE,KAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAeE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,GAAG,EAAC,kBAA7B;AAAgD,IAAA,GAAG,EAAC,aAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CAfF,CADF;AAmCD,CAzDD;;AA2DA,eAAeN,KAAf","sourcesContent":["import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport {\n  GoogleLogin,\n  GoogleLoginResponse,\n  GoogleLoginResponseOffline,\n} from 'react-google-login';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectUser, login } from '../redux/slices/auth';\n\n// https://developers.google.com/identity/sign-in/web/sign-in\ninterface PathProps {\n  handleClose: Function;\n  show: boolean;\n}\n\nconst Login: React.FC<PathProps> = ({ handleClose, show }) => {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  const isOnline = (\n    response: GoogleLoginResponse | GoogleLoginResponseOffline,\n  ): response is GoogleLoginResponse => {\n    return 'profileObj' in response;\n  };\n\n  const responseGoogleSuccess = (\n    response: GoogleLoginResponse | GoogleLoginResponseOffline,\n  ) => {\n    if (isOnline(response)) {\n      const profile = response.profileObj;\n      dispatch(login(profile.name, profile.email));\n    } else {\n      console.log('User is offline');\n      console.log(response);\n    }\n  };\n\n  return (\n    <Modal id=\"LoginModal\" show={show} onHide={handleClose} centered>\n      <Button className=\"btn-filter\">\n        <img\n          className=\"d-block\"\n          src=\"/close.svg\"\n          alt=\"Close\"\n          onClick={() => handleClose()}\n        />\n      </Button>\n      <img className=\"d-block\" src=\"/login.svg\" alt=\"LogIn\" />\n      {user ? (\n        <span className=\"word\"> Logged In using Redux as {user.name}! </span> // lil' test here\n      ) : (\n        <></>\n      )}\n      <GoogleLogin\n        className=\"g-auth\"\n        clientId=\"778916194800-977823s60p7mtu1sj72ru0922p2pqh6m.apps.googleusercontent.com\"\n        onSuccess={(response) => {\n          responseGoogleSuccess(response);\n          handleClose();\n        }}\n        onFailure={(response) => console.log(response)}\n        // TODO: add login cookie to onSuccess using universal-cookie\n        cookiePolicy=\"single_host_origin\"\n        icon={false}\n      >\n        {/* \n        isSignedIn={true} attribute will call onSuccess callback on load to keep the user signed in\n         */}\n        <img className=\"d-block\" src=\"/loginButton.svg\" alt=\"LogInButton\" />\n      </GoogleLogin>\n    </Modal>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}