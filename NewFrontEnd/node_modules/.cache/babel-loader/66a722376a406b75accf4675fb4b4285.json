{"ast":null,"code":"import { intervalOptions, monthsUnabrvToAbrv, yearMonths, Month, RoomType } from '../constants';\n/**\n * Use to define validation checks for an object T.\n */\n\n/**\n * Function used to validate move in select form\n * @param earlyMonth - the early month selected\n * @param earlyInterval - the early interval selected\n * @param lateMonth - the late month selected\n * @param lateInterval - the late interval selected\n */\nconst moveInSelect = (earlyMonth, earlyInterval, lateMonth, lateInterval) => {\n  if (yearMonths.indexOf(earlyMonth) > yearMonths.indexOf(lateMonth)) {\n    // neither has anytime as the option\n    if (![earlyMonth, lateMonth].includes(Month.Anytime)) {\n      return false;\n    }\n  }\n\n  if (yearMonths.indexOf(earlyMonth) === yearMonths.indexOf(lateMonth) && ![earlyMonth, lateMonth].includes(Month.Anytime)) {\n    // neither has anytime as the option\n    if (![earlyInterval, lateInterval].includes(Month.Anytime) && intervalOptions.indexOf(earlyInterval) > intervalOptions.indexOf(lateInterval)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Use to abbreviate a month\n * @param month - the month to abbreviate (must be in the enum 'months')\n */\n\n\nconst abbreviateMonth = month => monthsUnabrvToAbrv[month];\n/**\n * Use to format roomType string, as returned from BE\n * @param roomType - roomType to format\n */\n\n\nconst formatRoomType = roomType => RoomType[roomType];\n/**\n * Use to abbreviate address to only everything before the first comma\n */\n\n\nconst abbreviateAddress = address => address.split(',')[0];\n/**\n * Use to remove parentheses and everything inside the parentheses\n */\n\n\nconst removeParentheses = str => str.replace(/ *\\([^)]*\\) */g, '');\n/**\n * Use to abbreviate moveIn string\n */\n\n\nconst abbreviateMoveIn = (earlyInt, earlyMonth, lateInt, lateMonth) => {\n  // 1st pass: anytime from\n  if (earlyInt === 'Anytime') {\n    earlyInt = 'Early';\n  } // 2nd pass: anytime to\n\n\n  if (lateInt === 'Anytime') {\n    lateInt = 'Late';\n  }\n\n  if (earlyMonth === lateMonth) {\n    // 3rd pass: duplicates, or early - late\n    if (earlyInt === lateInt) {\n      return `${earlyInt} ${abbreviateMonth(earlyMonth)}`;\n    }\n\n    if (earlyInt === 'Early' && lateInt === 'Late') {\n      return `${abbreviateMonth(earlyMonth)}`;\n    }\n  }\n\n  return `${earlyInt} ${abbreviateMonth(earlyMonth)} - ${lateInt} ${abbreviateMonth(lateMonth)}`;\n};\n\nexport { moveInSelect, abbreviateMonth, abbreviateAddress, removeParentheses, abbreviateMoveIn, formatRoomType };","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/assets/utils/index.tsx"],"names":["intervalOptions","monthsUnabrvToAbrv","yearMonths","Month","RoomType","moveInSelect","earlyMonth","earlyInterval","lateMonth","lateInterval","indexOf","includes","Anytime","abbreviateMonth","month","formatRoomType","roomType","abbreviateAddress","address","split","removeParentheses","str","replace","abbreviateMoveIn","earlyInt","lateInt"],"mappings":"AAAA,SACEA,eADF,EAGEC,kBAHF,EAIEC,UAJF,EAKEC,KALF,EAMEC,QANF,QAOO,cAPP;AASA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CACnBC,UADmB,EAEnBC,aAFmB,EAGnBC,SAHmB,EAInBC,YAJmB,KAKP;AACZ,MAAIP,UAAU,CAACQ,OAAX,CAAmBJ,UAAnB,IAAiCJ,UAAU,CAACQ,OAAX,CAAmBF,SAAnB,CAArC,EAAoE;AAClE;AACA,QAAI,CAAC,CAACF,UAAD,EAAaE,SAAb,EAAwBG,QAAxB,CAAiCR,KAAK,CAACS,OAAvC,CAAL,EAAsD;AACpD,aAAO,KAAP;AACD;AACF;;AACD,MACEV,UAAU,CAACQ,OAAX,CAAmBJ,UAAnB,MAAmCJ,UAAU,CAACQ,OAAX,CAAmBF,SAAnB,CAAnC,IACA,CAAC,CAACF,UAAD,EAAaE,SAAb,EAAwBG,QAAxB,CAAiCR,KAAK,CAACS,OAAvC,CAFH,EAGE;AACA;AACA,QACE,CAAC,CAACL,aAAD,EAAgBE,YAAhB,EAA8BE,QAA9B,CAAuCR,KAAK,CAACS,OAA7C,CAAD,IACAZ,eAAe,CAACU,OAAhB,CAAwBH,aAAxB,IACEP,eAAe,CAACU,OAAhB,CAAwBD,YAAxB,CAHJ,EAIE;AACA,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CA1BD;AA4BA;AACA;AACA;AACA;;;AACA,MAAMI,eAAe,GAAIC,KAAD,IAA6Bb,kBAAkB,CAACa,KAAD,CAAvE;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,cAAc,GAAIC,QAAD,IACrBZ,QAAQ,CAACY,QAAD,CADV;AAGA;AACA;AACA;;;AACA,MAAMC,iBAAiB,GAAIC,OAAD,IAA6BA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAvD;AAEA;AACA;AACA;;;AACA,MAAMC,iBAAiB,GAAIC,GAAD,IACxBA,GAAG,CAACC,OAAJ,CAAY,gBAAZ,EAA8B,EAA9B,CADF;AAGA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,CACvBC,QADuB,EAEvBlB,UAFuB,EAGvBmB,OAHuB,EAIvBjB,SAJuB,KAKZ;AACX;AACA,MAAIgB,QAAQ,KAAK,SAAjB,EAA4B;AAC1BA,IAAAA,QAAQ,GAAG,OAAX;AACD,GAJU,CAKX;;;AACA,MAAIC,OAAO,KAAK,SAAhB,EAA2B;AACzBA,IAAAA,OAAO,GAAG,MAAV;AACD;;AACD,MAAInB,UAAU,KAAKE,SAAnB,EAA8B;AAC5B;AACA,QAAIgB,QAAQ,KAAKC,OAAjB,EAA0B;AACxB,aAAQ,GAAED,QAAS,IAAGX,eAAe,CAACP,UAAD,CAAa,EAAlD;AACD;;AACD,QAAIkB,QAAQ,KAAK,OAAb,IAAwBC,OAAO,KAAK,MAAxC,EAAgD;AAC9C,aAAQ,GAAEZ,eAAe,CAACP,UAAD,CAAa,EAAtC;AACD;AACF;;AACD,SAAQ,GAAEkB,QAAS,IAAGX,eAAe,CACnCP,UADmC,CAEnC,MAAKmB,OAAQ,IAAGZ,eAAe,CAACL,SAAD,CAAY,EAF7C;AAGD,CA1BD;;AA4BA,SACEH,YADF,EAEEQ,eAFF,EAGEI,iBAHF,EAIEG,iBAJF,EAKEG,gBALF,EAMER,cANF","sourcesContent":["import {\n  intervalOptions,\n  MonthAbrv,\n  monthsUnabrvToAbrv,\n  yearMonths,\n  Month,\n  RoomType,\n} from '../constants';\n\n/**\n * Use to define validation checks for an object T.\n */\nexport type ObjectValidationChecks<T> = {\n  [key in keyof T]: (value: T[key]) => boolean;\n};\n\n/**\n * Use as a type for \"one of the variables from P\".\n */\nexport type OneFrom<P> = { [K in keyof P]: Pick<P, K> };\n\n/**\n * Function used to validate move in select form\n * @param earlyMonth - the early month selected\n * @param earlyInterval - the early interval selected\n * @param lateMonth - the late month selected\n * @param lateInterval - the late interval selected\n */\nconst moveInSelect = (\n  earlyMonth: string,\n  earlyInterval: string,\n  lateMonth: string,\n  lateInterval: string,\n): boolean => {\n  if (yearMonths.indexOf(earlyMonth) > yearMonths.indexOf(lateMonth)) {\n    // neither has anytime as the option\n    if (![earlyMonth, lateMonth].includes(Month.Anytime)) {\n      return false;\n    }\n  }\n  if (\n    yearMonths.indexOf(earlyMonth) === yearMonths.indexOf(lateMonth) &&\n    ![earlyMonth, lateMonth].includes(Month.Anytime)\n  ) {\n    // neither has anytime as the option\n    if (\n      ![earlyInterval, lateInterval].includes(Month.Anytime) &&\n      intervalOptions.indexOf(earlyInterval) >\n        intervalOptions.indexOf(lateInterval)\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Use to abbreviate a month\n * @param month - the month to abbreviate (must be in the enum 'months')\n */\nconst abbreviateMonth = (month: Month): MonthAbrv => monthsUnabrvToAbrv[month];\n\n/**\n * Use to format roomType string, as returned from BE\n * @param roomType - roomType to format\n */\nconst formatRoomType = (roomType: string): RoomType =>\n  RoomType[roomType as keyof typeof RoomType];\n\n/**\n * Use to abbreviate address to only everything before the first comma\n */\nconst abbreviateAddress = (address: string): string => address.split(',')[0];\n\n/**\n * Use to remove parentheses and everything inside the parentheses\n */\nconst removeParentheses = (str: string): string =>\n  str.replace(/ *\\([^)]*\\) */g, '');\n\n/**\n * Use to abbreviate moveIn string\n */\nconst abbreviateMoveIn = (\n  earlyInt: string,\n  earlyMonth: Month,\n  lateInt: string,\n  lateMonth: Month,\n): string => {\n  // 1st pass: anytime from\n  if (earlyInt === 'Anytime') {\n    earlyInt = 'Early';\n  }\n  // 2nd pass: anytime to\n  if (lateInt === 'Anytime') {\n    lateInt = 'Late';\n  }\n  if (earlyMonth === lateMonth) {\n    // 3rd pass: duplicates, or early - late\n    if (earlyInt === lateInt) {\n      return `${earlyInt} ${abbreviateMonth(earlyMonth)}`;\n    }\n    if (earlyInt === 'Early' && lateInt === 'Late') {\n      return `${abbreviateMonth(earlyMonth)}`;\n    }\n  }\n  return `${earlyInt} ${abbreviateMonth(\n    earlyMonth,\n  )} - ${lateInt} ${abbreviateMonth(lateMonth)}`;\n};\n\nexport {\n  moveInSelect,\n  abbreviateMonth,\n  abbreviateAddress,\n  removeParentheses,\n  abbreviateMoveIn,\n  formatRoomType,\n};\n"]},"metadata":{},"sourceType":"module"}