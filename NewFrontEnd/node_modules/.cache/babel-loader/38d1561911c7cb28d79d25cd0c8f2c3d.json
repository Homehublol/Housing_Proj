{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getHousingPostsAPI, searchHousingPostsAPI } from '../../apis';\nimport { addHousingBookmarkAPI, getHousingBookmarksAPI, removeHousingBookmarkAPI } from '../../apis/housing'; // TODO probably split up this housing slice into several folders, where thunks are in a\n// folder, selectors in another, reducers in another, and then export them and import\n// them to here\n\nconst initialState = {\n  posts: undefined,\n  favorites: undefined\n};\nexport const housingSlice = createSlice({\n  name: 'housing',\n  initialState,\n  reducers: {\n    setHousingPosts: (state, action) => {\n      state.posts = action.payload;\n    },\n    appendToHousingPosts: (state, action) => {\n      if (state.posts) {\n        state.posts.push(...action.payload);\n      } else {\n        state.posts = action.payload;\n      }\n    },\n    setHousingFavorites: (state, action) => {\n      state.favorites = {};\n\n      if (action.payload) {\n        action.payload.forEach(housePost => {\n          if (state.favorites) state.favorites[housePost.roomId] = housePost;\n        });\n      }\n    },\n    addToHousingFavorites: (state, action) => {\n      if (!state.favorites) state.favorites = {};\n      state.favorites[action.payload.roomId] = action.payload;\n    },\n    // Pass in the HousePost ID (temporarily use the function defined above)\n    removeFromHousingFavorites: (state, action) => {\n      if (state.favorites) {\n        delete state.favorites[action.payload];\n      }\n    }\n  }\n}); // export the reducers that should be accessible by outside files\n\nexport const {} = housingSlice.actions; // do NOT export these reducers. Only declare them and use them in the THUNKS\n\nconst {\n  setHousingPosts,\n  appendToHousingPosts,\n  setHousingFavorites,\n  addToHousingFavorites,\n  removeFromHousingFavorites\n} = housingSlice.actions; // PUT THUNKS HERE\n\nexport const getHousingPosts = () => async dispatch => {\n  // get the housing and then set the housing in redux\n  const housingPosts = await getHousingPostsAPI();\n  dispatch(setHousingPosts(housingPosts));\n};\nexport const searchHousingPosts = housePost => async (dispatch) => {\n  const searchResults = await searchHousingPostsAPI(housePost);\n  dispatch(setHousingPosts(searchResults)); // TODO this is temporary. eventually have a separate var for the search results\n};\nexport const newHousingPost = housePost => async (dispatch) => {\n  const result = true; // TODO await newHousingPostAPI(housePost);\n\n  if (result) {\n    dispatch(appendToHousingPosts([housePost]));\n  } else {// handle the error\n  }\n};\nexport const getHousingFavorites = () => async dispatch => {\n  const favorites = await getHousingBookmarksAPI();\n\n  if (favorites) {\n    dispatch(setHousingFavorites(favorites));\n  } else {// handle errors here\n  }\n};\nexport const newHousingFavorite = housePost => async (dispatch) => {\n  // TODO eventually change the housePost in here to just be the housePostId\n  const result = await addHousingBookmarkAPI(housePost.roomId);\n\n  if (result) {\n    dispatch(addToHousingFavorites(housePost));\n  } else {// handle error here\n  }\n};\nexport const removeHousingFavorite = roomId => async (dispatch) => {\n  const result = await removeHousingBookmarkAPI(roomId);\n\n  if (result) {\n    dispatch(removeFromHousingFavorites(roomId));\n  } else {// handle error here\n  }\n}; // SELECTORS HERE\n\nexport const selectHousingPosts = state => state.housing.posts;\nexport const selectHousingFavorites = state => state.housing.favorites;\nexport default housingSlice.reducer;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/redux/slices/housing.ts"],"names":["createSlice","getHousingPostsAPI","searchHousingPostsAPI","addHousingBookmarkAPI","getHousingBookmarksAPI","removeHousingBookmarkAPI","initialState","posts","undefined","favorites","housingSlice","name","reducers","setHousingPosts","state","action","payload","appendToHousingPosts","push","setHousingFavorites","forEach","housePost","roomId","addToHousingFavorites","removeFromHousingFavorites","actions","getHousingPosts","dispatch","housingPosts","searchHousingPosts","searchResults","newHousingPost","result","getHousingFavorites","newHousingFavorite","removeHousingFavorite","selectHousingPosts","housing","selectHousingFavorites","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getHousingPostsAPI, searchHousingPostsAPI } from '../../apis';\nimport { HousePost } from '../../assets/models/PostModels';\nimport { FilterModel } from '../../assets/models/FilterModel';\nimport { AppThunk, RootState } from '../store';\nimport {\n  addHousingBookmarkAPI,\n  getHousingBookmarksAPI,\n  removeHousingBookmarkAPI,\n} from '../../apis/housing';\n\n// TODO probably split up this housing slice into several folders, where thunks are in a\n// folder, selectors in another, reducers in another, and then export them and import\n// them to here\n\ninterface HousingState {\n  posts?: HousePost[]; // TODO change this to be a object from the housepost's id to the housepost, then change favorites to be id: boolean\n  // TODO eventually do this: searchResults?: HousePost[];     and have a 'SearchResultsLoading' boolean\n  favorites?: { [id: string]: HousePost };\n}\n\nconst initialState: HousingState = {\n  posts: undefined,\n  favorites: undefined,\n};\n\nexport const housingSlice = createSlice({\n  name: 'housing',\n  initialState,\n  reducers: {\n    setHousingPosts: (\n      state,\n      action: PayloadAction<HousePost[] | undefined>,\n    ) => {\n      state.posts = action.payload;\n    },\n    appendToHousingPosts: (state, action: PayloadAction<HousePost[]>) => {\n      if (state.posts) {\n        state.posts.push(...action.payload);\n      } else {\n        state.posts = action.payload;\n      }\n    },\n    setHousingFavorites: (\n      state,\n      action: PayloadAction<HousePost[] | undefined>,\n    ) => {\n      state.favorites = {};\n\n      if (action.payload) {\n        action.payload.forEach((housePost) => {\n          if (state.favorites) state.favorites[housePost.roomId] = housePost;\n        });\n      }\n    },\n    addToHousingFavorites: (state, action: PayloadAction<HousePost>) => {\n      if (!state.favorites) state.favorites = {};\n\n      state.favorites[action.payload.roomId] = action.payload;\n    },\n    // Pass in the HousePost ID (temporarily use the function defined above)\n    removeFromHousingFavorites: (state, action: PayloadAction<number>) => {\n      if (state.favorites) {\n        delete state.favorites[action.payload];\n      }\n    },\n  },\n});\n\n// export the reducers that should be accessible by outside files\nexport const {} = housingSlice.actions;\n// do NOT export these reducers. Only declare them and use them in the THUNKS\nconst {\n  setHousingPosts,\n  appendToHousingPosts,\n  setHousingFavorites,\n  addToHousingFavorites,\n  removeFromHousingFavorites,\n} = housingSlice.actions;\n\n// PUT THUNKS HERE\nexport const getHousingPosts = (): AppThunk => async (dispatch) => {\n  // get the housing and then set the housing in redux\n  const housingPosts = await getHousingPostsAPI();\n  dispatch(setHousingPosts(housingPosts));\n};\n\nexport const searchHousingPosts = (housePost: FilterModel): AppThunk => async (\n  dispatch,\n) => {\n  const searchResults = await searchHousingPostsAPI(housePost);\n  dispatch(setHousingPosts(searchResults)); // TODO this is temporary. eventually have a separate var for the search results\n};\n\nexport const newHousingPost = (housePost: HousePost): AppThunk => async (\n  dispatch,\n) => {\n  const result = true; // TODO await newHousingPostAPI(housePost);\n  if (result) {\n    dispatch(appendToHousingPosts([housePost]));\n  } else {\n    // handle the error\n  }\n};\n\nexport const getHousingFavorites = (): AppThunk => async (dispatch) => {\n  const favorites = await getHousingBookmarksAPI();\n  if (favorites) {\n    dispatch(setHousingFavorites(favorites));\n  } else {\n    // handle errors here\n  }\n};\n\nexport const newHousingFavorite = (housePost: HousePost): AppThunk => async (\n  dispatch,\n) => {\n  // TODO eventually change the housePost in here to just be the housePostId\n  const result = await addHousingBookmarkAPI(housePost.roomId);\n  if (result) {\n    dispatch(addToHousingFavorites(housePost));\n  } else {\n    // handle error here\n  }\n};\n\nexport const removeHousingFavorite = (roomId: number): AppThunk => async (\n  dispatch,\n) => {\n  const result = await removeHousingBookmarkAPI(roomId);\n  if (result) {\n    dispatch(removeFromHousingFavorites(roomId));\n  } else {\n    // handle error here\n  }\n};\n\n// SELECTORS HERE\nexport const selectHousingPosts = (state: RootState) => state.housing.posts;\nexport const selectHousingFavorites = (state: RootState) =>\n  state.housing.favorites;\n\nexport default housingSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}