{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/FilterForm/FilterPage2.tsx\";\nimport React from 'react';\nimport { Container, Row, Col, Form } from 'react-bootstrap';\nimport * as z from 'zod';\nimport { RoomType } from '../../assets/constants';\nimport { roomTypeIconsTemp } from '../../assets/icons/all';\nimport Dropdown from '../basics/Dropdown';\nimport ToggleGroup from '../basics/ToggleGroup';\nexport const page2Schema = z.object({\n  numBeds: z.string(),\n  numBaths: z.string(),\n  roomTypes: z.nativeEnum(RoomType).array()\n});\nexport const page2InitialStore = {\n  numBeds: 0,\n  numBaths: 0,\n  roomTypes: []\n};\n\nconst FilterPage2 = ({\n  numBeds,\n  numBaths,\n  roomTypes,\n  validations,\n  setStore\n}) => {\n  var _validations$numBeds, _validations$numBeds2, _validations$numBaths, _validations$numBaths2, _validations$roomType;\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"justify-content-center m-2 my-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"Unit / Room Type\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.Row, {\n    className: \"m-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    className: \"filterform-word\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, \"Unit Size\"))), /*#__PURE__*/React.createElement(Form.Row, {\n    className: \"m-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    options: [0, 1, 2, 3, 4, 5],\n    initialSelected: numBeds // className=\"filterform-short-dropdown\"\n    ,\n    inlineText: \"Bedrooms\",\n    isValid: validations === null || validations === void 0 ? void 0 : (_validations$numBeds = validations.numBeds) === null || _validations$numBeds === void 0 ? void 0 : _validations$numBeds.success,\n    error: validations === null || validations === void 0 ? void 0 : (_validations$numBeds2 = validations.numBeds) === null || _validations$numBeds2 === void 0 ? void 0 : _validations$numBeds2.error,\n    onSelect: (s, e) => setStore({\n      numBeds: s !== null ? s : undefined\n    }),\n    noFilter: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: {\n      span: 5,\n      offset: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    options: [],\n    initialSelected: numBaths // className=\"filterform-short-dropdown\"\n    ,\n    inlineText: \"Bathrooms\",\n    isValid: validations === null || validations === void 0 ? void 0 : (_validations$numBaths = validations.numBaths) === null || _validations$numBaths === void 0 ? void 0 : _validations$numBaths.success,\n    error: validations === null || validations === void 0 ? void 0 : (_validations$numBaths2 = validations.numBaths) === null || _validations$numBaths2 === void 0 ? void 0 : _validations$numBaths2.error,\n    onSelect: (s, e) => setStore({\n      numBaths: s !== null ? s : undefined\n    }),\n    noFilter: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Row, {\n    className: \"m-2 mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ToggleGroup, {\n    content: [{\n      label: RoomType.Single,\n      icon: roomTypeIconsTemp.single\n    }, {\n      label: RoomType.Double,\n      icon: roomTypeIconsTemp.double\n    }, {\n      label: RoomType.Triple,\n      icon: roomTypeIconsTemp.triple\n    }],\n    label: \"Room Type (select all that apply)\",\n    initialSelected: roomTypes,\n    onSelect: ({\n      label,\n      selected\n    }) => {\n      if (selected) {\n        setStore({\n          roomTypes: [...roomTypes, label]\n        });\n      } else {\n        setStore({\n          roomTypes: roomTypes.filter(roomType => roomType !== label)\n        });\n      }\n    },\n    error: validations === null || validations === void 0 ? void 0 : (_validations$roomType = validations.roomTypes) === null || _validations$roomType === void 0 ? void 0 : _validations$roomType.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default FilterPage2;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/FilterForm/FilterPage2.tsx"],"names":["React","Container","Row","Col","Form","z","RoomType","roomTypeIconsTemp","Dropdown","ToggleGroup","page2Schema","object","numBeds","string","numBaths","roomTypes","nativeEnum","array","page2InitialStore","FilterPage2","validations","setStore","success","error","s","e","undefined","span","offset","label","Single","icon","single","Double","double","Triple","triple","selected","filter","roomType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\nimport * as z from 'zod';\nimport { RoomType } from '../../assets/constants';\nimport { roomTypeIconsTemp } from '../../assets/icons/all';\nimport { WizardFormStep } from '../WizardForm';\nimport Dropdown from '../basics/Dropdown';\nimport ToggleGroup from '../basics/ToggleGroup';\n\nexport const page2Schema = z.object({\n  numBeds: z.string(),\n  numBaths: z.string(),\n  roomTypes: z.nativeEnum(RoomType).array(),\n});\n\nexport type Page2Store = z.infer<typeof page2Schema>;\n\nexport const page2InitialStore: Page2Store = {\n  numBeds: 0,\n  numBaths: 0,\n  roomTypes: [],\n};\n\nconst FilterPage2: React.FC<WizardFormStep<Page2Store>> = ({\n  numBeds,\n  numBaths,\n  roomTypes,\n  validations,\n  setStore,\n}) => {\n  return (\n    <Container>\n      <Row className=\"justify-content-center m-2 my-4\">\n        <div className=\"post-title\">Unit / Room Type</div>\n      </Row>\n\n      <br />\n\n      <Form.Row className=\"m-2\">\n        <Col>\n          <Form.Label className=\"filterform-word\">Unit Size</Form.Label>\n        </Col>\n      </Form.Row>\n      <Form.Row className=\"m-2\">\n        <Col md={5}>\n          <Dropdown\n            options={[0,1,2,3,4,5]}\n            initialSelected={numBeds}\n            // className=\"filterform-short-dropdown\"\n            inlineText=\"Bedrooms\"\n            isValid={validations?.numBeds?.success}\n            error={validations?.numBeds?.error}\n            onSelect={(s, e) =>\n              setStore({ numBeds: s !== null ? s : undefined })\n            }\n            noFilter\n          />\n        </Col>\n        <Col md={{ span: 5, offset: 1 }}>\n          <Dropdown\n            options={[]}\n            initialSelected={numBaths}\n            // className=\"filterform-short-dropdown\"\n            inlineText=\"Bathrooms\"\n            isValid={validations?.numBaths?.success}\n            error={validations?.numBaths?.error}\n            onSelect={(s, e) =>\n              setStore({ numBaths: s !== null ? s : undefined })\n            }\n            noFilter\n          />\n        </Col>\n      </Form.Row>\n\n      <Form.Row className=\"m-2 mt-5\">\n        <Col>\n          <ToggleGroup\n            content={[\n              { label: RoomType.Single, icon: roomTypeIconsTemp.single },\n              { label: RoomType.Double, icon: roomTypeIconsTemp.double },\n              { label: RoomType.Triple, icon: roomTypeIconsTemp.triple },\n            ]}\n            label=\"Room Type (select all that apply)\"\n            initialSelected={roomTypes}\n            onSelect={({ label, selected }) => {\n              if (selected) {\n                setStore({ roomTypes: [...roomTypes, label as RoomType] });\n              } else {\n                setStore({\n                  roomTypes: roomTypes.filter((roomType) => roomType !== label),\n                });\n              }\n            }}\n            error={validations?.roomTypes?.error}\n          />\n        </Col>\n      </Form.Row>\n    </Container>\n  );\n};\n\nexport default FilterPage2 as React.FC;\n"]},"metadata":{},"sourceType":"module"}