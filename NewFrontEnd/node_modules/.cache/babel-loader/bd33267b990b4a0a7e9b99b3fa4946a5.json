{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/basics/ToggleGroup.tsx\";\nimport React, { useState, useRef } from 'react';\nimport { Form } from 'react-bootstrap';\nimport Toggle from './Toggle';\n\nconst getLabels = content => {\n  return content.map(c => typeof c === 'string' ? c : c.label);\n};\n\nconst selectedAsBoolArr = (content, selected) => {\n  if (Array.isArray(selected)) {\n    if (typeof selected[0] === 'string') {\n      return getLabels(content).map(label => selected.includes(label));\n    }\n\n    return selected;\n  }\n\n  return getLabels(content).map(label => label === selected);\n};\n\nconst ToggleGroup = ({\n  content,\n  initialSelected,\n  singleSelect,\n  hideLabels,\n  center,\n  onSelect,\n  label,\n  labelClassName = '',\n  error,\n  errorClassName = '',\n  toggleClassName = '',\n  required,\n  className = '',\n  ...wrapperProps\n}) => {\n  const typedInitialSelected = useRef(initialSelected ? selectedAsBoolArr(content, initialSelected) : undefined);\n  const [areSelected, setAreSelected] = useState(typedInitialSelected.current || content.map(() => false));\n  return /*#__PURE__*/React.createElement(Form.Group, {\n    className: `toggle-group ${center ? 'toggle-group-center' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, (label || required) && /*#__PURE__*/React.createElement(Form.Label, {\n    className: `toggle-group-label ${labelClassName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, label, required && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"toggle-group-required-asterisk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \" *\")), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, wrapperProps, {\n    className: `toggle-group-wrapper ${center ? 'toggle-group-center' : ''} ${className}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), content.map((c, index) => {\n    const curLabel = typeof c === 'string' ? c : c.label;\n    const icon = typeof c !== 'string' ? c.icon : undefined;\n    return /*#__PURE__*/React.createElement(Toggle, {\n      label: curLabel,\n      icon: icon,\n      hideLabel: hideLabels,\n      initialSelected: typedInitialSelected.current && typedInitialSelected.current[index],\n      selected: areSelected[index],\n      onClick: newSelected => {\n        const updatedSelected = singleSelect ? areSelected.map((s, i) => index === i) : { ...areSelected,\n          [index]: newSelected\n        };\n        setAreSelected(updatedSelected);\n\n        if (onSelect) {\n          onSelect({\n            label: curLabel,\n            selected: newSelected\n          }, updatedSelected);\n        }\n      },\n      key: curLabel,\n      className: `${toggleClassName} + ${!center ? ' toggle-group-line-up-toggle' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    });\n  })), error && /*#__PURE__*/React.createElement(Form.Label, {\n    className: `toggle-group-error ${errorClassName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, error));\n};\n\nexport default ToggleGroup;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/basics/ToggleGroup.tsx"],"names":["React","useState","useRef","Form","Toggle","getLabels","content","map","c","label","selectedAsBoolArr","selected","Array","isArray","includes","ToggleGroup","initialSelected","singleSelect","hideLabels","center","onSelect","labelClassName","error","errorClassName","toggleClassName","required","className","wrapperProps","typedInitialSelected","undefined","areSelected","setAreSelected","current","index","curLabel","icon","newSelected","updatedSelected","s","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as z from 'zod';\nimport Toggle from './Toggle';\nimport { Icon } from '../../assets/icons/all';\n\nexport interface ToggleContent {\n  icon: Icon;\n  label: string;\n}\n\ninterface ToggleGroupProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onSelect'> {\n  content: string[] | ToggleContent[];\n  initialSelected?: boolean[] | string[] | string; // TODO define this to be the same length as content somehow? Also allow this to be an array of strings\n  singleSelect?: boolean; // makes it so only one toggle will be selected\n  hideLabels?: boolean;\n  center?: boolean; // determines whether or not to center the toggles/labels/errors\n  onSelect?: (\n    newlySelected: { label: string; selected: boolean },\n    allSelected: boolean[], // TODO change this to be { label: string; selected: boolean }, and change toggle group to keep track of which are selected with label instead of array of booleans\n  ) => any;\n  label?: string;\n  labelClassName?: string;\n  error?: string | z.ZodIssue; // Will make the input border red as well\n  errorClassName?: string;\n  toggleClassName?: string;\n  required?: boolean;\n}\n\nconst getLabels = (content: string[] | ToggleContent[]): string[] => {\n  return (content as [ToggleContent | string]).map((c) =>\n    typeof c === 'string' ? c : c.label,\n  );\n};\n\nconst selectedAsBoolArr = (\n  content: string[] | ToggleContent[],\n  selected: boolean[] | string[] | string,\n): boolean[] => {\n  if (Array.isArray(selected)) {\n    if (typeof selected[0] === 'string') {\n      return getLabels(content).map((label) =>\n        (selected as string[]).includes(label),\n      );\n    }\n    return selected as boolean[];\n  }\n\n  return getLabels(content).map((label) => label === selected);\n};\n\nconst ToggleGroup: React.FC<ToggleGroupProps> = ({\n  content,\n  initialSelected,\n  singleSelect,\n  hideLabels,\n  center,\n  onSelect,\n  label,\n  labelClassName = '',\n  error,\n  errorClassName = '',\n  toggleClassName = '',\n  required,\n  className = '',\n  ...wrapperProps\n}) => {\n  const typedInitialSelected = useRef<undefined | boolean[]>(\n    initialSelected ? selectedAsBoolArr(content, initialSelected) : undefined,\n  );\n  const [areSelected, setAreSelected] = useState<boolean[]>(\n    typedInitialSelected.current ||\n      (content as [string | ToggleContent]).map(() => false),\n  );\n\n  return (\n    <Form.Group\n      className={`toggle-group ${center ? 'toggle-group-center' : ''}`}\n    >\n      {(label || required) && (\n        <Form.Label className={`toggle-group-label ${labelClassName}`}>\n          {label}\n          {required && (\n            <span className=\"toggle-group-required-asterisk\"> *</span>\n          )}\n        </Form.Label>\n      )}\n\n      <div\n        {...wrapperProps}\n        className={`toggle-group-wrapper ${\n          center ? 'toggle-group-center' : ''\n        } ${className}`}\n      >\n        {(content as [string | ToggleContent]).map((c, index) => {\n          const curLabel = typeof c === 'string' ? c : c.label;\n          const icon = typeof c !== 'string' ? c.icon : undefined;\n\n          return (\n            <Toggle\n              label={curLabel}\n              icon={icon}\n              hideLabel={hideLabels}\n              initialSelected={\n                typedInitialSelected.current &&\n                typedInitialSelected.current[index]\n              }\n              selected={areSelected[index]}\n              onClick={(newSelected) => {\n                const updatedSelected = singleSelect\n                  ? areSelected.map((s, i) => index === i)\n                  : { ...areSelected, [index]: newSelected };\n                setAreSelected(updatedSelected);\n\n                if (onSelect) {\n                  onSelect(\n                    { label: curLabel, selected: newSelected },\n                    updatedSelected,\n                  );\n                }\n              }}\n              key={curLabel}\n              className={`${toggleClassName} + ${\n                !center ? ' toggle-group-line-up-toggle' : ''\n              }`}\n            />\n          );\n        })}\n      </div>\n\n      {error && (\n        <Form.Label className={`toggle-group-error ${errorClassName}`}>\n          {error}\n        </Form.Label>\n      )}\n    </Form.Group>\n  );\n};\n\nexport default ToggleGroup;\n"]},"metadata":{},"sourceType":"module"}