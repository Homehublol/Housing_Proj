{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/WizardForm.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { miscIcons } from '../assets/icons/all';\n\n/**\n * Not using React.FC as a work around to allow for generics for Wizard Form.\n * Do not do this normally. I will try to find a better way to do this\n */\n\n/**\n * Wizard Form React Component.\n */\nconst WizardForm = ({\n  children,\n  show,\n  setShow,\n  title,\n  onSubmit,\n  initialStore,\n  schemas,\n  lastButtonAsInactiveArrow,\n  // TODO customLastButton,\n  lastButtonText = 'Submit'\n}) => {\n  const [curIndex, setCurIndex] = useState(0);\n  const [isFirst, setIsFirst] = useState(true);\n  const [isLast, setIsLast] = useState(curIndex === children.length - 1);\n  const [CurStep, setCurStep] = useState(children[0]);\n  const [store, setCompleteStore] = useState(initialStore); // TODO maybe add useEffect so that whenever the initialStore changes, it updates the store (might cause issues tho, if the user makes changes and then we change the initialState, it'll override the changes). maybe what you should do is just not display the modal unless the show is true -- then you could have a useeffect on the show, and whenever the show becomes true, you should update the intialState with the current value?\n  // TODO const [curStore, setCurStore] = useState<>\n  // keeps track of the errors for each field\n\n  const [validations, setValidations] = useState(children.map(() => undefined)); // TODO maybe add a thing to keep track of whether or not an entire step is validated. Then use this in the dots to display which have errors? (i.e. make them red dots)\n  // const [validSteps, setValidSteps] = useState<boolean[]>(\n  //   children.map(() => false),\n  // );\n  // TODO const [isCurStepValid, setIsCurStepValid] = useState<boolean>();\n\n  useEffect(() => {\n    setCurStep(children[curIndex]);\n    setIsFirst(curIndex === 0);\n    setIsLast(curIndex === children.length - 1);\n  }, [curIndex, children]); // update if the current one is updated each time validations is updated\n  // TODO useEffect(() => {\n  // }, [validations, setIsCurStepValid]);\n\n  /**\n   * Use this to exit the wizard form without submitting.\n   */\n\n  const exitWizardForm = () => {\n    setShow(false);\n  };\n\n  const combineSuccesses = v => {\n    return Object.values(v).find(data => !data.success) === undefined;\n  };\n\n  const validatePickedValues = (schema, toParse, toValidate) => {\n    const result = schema.safeParse(toParse);\n    let changedErrors;\n\n    if (!result.success) {\n      const {\n        fieldErrors\n      } = result.error.formErrors;\n      changedErrors = toValidate.reduce((pre, key) => {\n        if (fieldErrors[key]) {\n          return { ...pre,\n            [key]: {\n              success: false,\n              error: fieldErrors[key][0]\n            }\n          };\n        }\n\n        return { ...pre,\n          [key]: {\n            success: true,\n            error: undefined\n          }\n        };\n      }, { ...validations[curIndex]\n      });\n    } else {\n      changedErrors = toValidate.reduce((pre, key) => ({ ...pre,\n        [key]: {\n          success: true,\n          error: undefined\n        }\n      }), { ...validations[curIndex]\n      });\n    }\n\n    return changedErrors;\n  };\n  /**\n   * Validates and updates current step.\n   * @param i The step to validate.\n   * @return If the data is all valid.\n   */\n\n\n  const validateStep = i => {\n    const stepValidations = validatePickedValues(schemas[i], store[i], Object.keys(store[i]));\n    setValidations({ ...validations,\n      [i]: { ...validations[i],\n        ...stepValidations\n      }\n    }); // TODO const noErrors = (Object.values(stepValidations) as Array<\n    //   { success: true; error: undefined } | { success: false; error: ZodIssue }\n    // >).reduce((pre, cur) => pre && cur.success, true);\n\n    const stepValidation = combineSuccesses(stepValidations); // TODO setValidSteps({ ...validSteps, [i]: stepValidation });\n\n    return stepValidation;\n  };\n  /**\n   * Validates current form step.\n   * @return If the data is all valid.\n   */\n\n\n  const validateCurrent = () => {\n    // validate everything that hasn't been validated yet\n    return validateStep(curIndex);\n  };\n  /**\n   * Use this to navigate the wizard form to a specific step.\n   * This will validate all the steps from the current step\n   * to the selected step and navigate to either the first\n   * step that is invalid or to the selected step.\n   * @param step The step to change to.\n   */\n\n\n  const setStep = step => {\n    // if clicked a later step, validate all steps from current to the selected step\n    if (step > curIndex) {\n      for (let i = curIndex; i < Math.min(step, children.length); i++) {\n        if (!validateStep(i)) {\n          setCurIndex(i);\n          return;\n        }\n      }\n    } // if reached here, all previous steps are valid\n\n\n    if (step <= 0) setCurIndex(0);\n    if (step >= children.length) setCurIndex(children.length - 1);\n    setCurIndex(step);\n  };\n  /**\n   * Use this to navigate the wizard form to the next step.\n   * This will first validate the current step and will\n   * move to the next one if possible.\n   */\n\n\n  const nextStep = () => {\n    // first validate\n    const dataIsValid = validateCurrent();\n\n    if (dataIsValid && curIndex + 1 < children.length) {\n      setCurIndex(curIndex + 1);\n    }\n  };\n  /**\n   * Use this to navigate the wizard form to the previous step.\n   */\n\n\n  const prevStep = () => {\n    if (curIndex - 1 >= 0) setCurIndex(curIndex - 1);\n  };\n  /**\n   * Use this to submit the form (it checks validation values first).\n   * Returns T/F based on success of validation values and onSubmit.\n   * (i.e. returns false if any validations are false, returns false\n   * if onSubmit returns false, otherwise returns true).\n   */\n\n\n  const submitForm = async () => {\n    for (let i = curIndex; i < children.length; i++) {\n      if (!validateStep(i)) {\n        setCurIndex(i);\n        return {\n          success: false,\n          message: \"Didn't pass validation.\"\n        };\n      }\n    } // Everything should be validated by this point\n\n\n    const combined = Object.values(store).reduce((pre, cur) => ({ ...pre,\n      ...cur\n    }));\n    const success = await onSubmit(combined);\n    if (success) exitWizardForm();\n    return {\n      success\n    };\n  };\n\n  const setStore = value => {\n    const changedValues = { ...store[curIndex],\n      ...value\n    };\n    setCompleteStore({ ...store,\n      [curIndex]: changedValues\n    }); // get the changed edited fields and set that they were changed\n\n    const changedEditedFields = Object.keys(value).reduce((prev, key) => {\n      prev[key] = true;\n      return prev;\n    }, {}); // every time there's a change, validate it\n\n    const changedErrors = validatePickedValues(schemas[curIndex], changedValues, Object.keys(changedEditedFields));\n    setValidations({ ...validations,\n      [curIndex]: { ...validations[curIndex],\n        ...changedErrors\n      }\n    });\n  }; // TODO need to figure out how to have loading thing on top\n\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    dialogClassName: \"wizard-form-modal-dialog\",\n    show: show,\n    onHide: () => setShow(false),\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"h-100 w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-form-top-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"no-show\",\n    onClick: () => setShow(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(miscIcons.orangeX, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-form-middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  }, React.cloneElement(CurStep, {\n    nextStep,\n    prevStep,\n    setStep,\n    exitWizardForm,\n    submitForm,\n    setStore,\n    validations: validations[curIndex],\n    ...store[curIndex]\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-form-bottom-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 11\n    }\n  }, children.map((c, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mx-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"no-show\",\n    onClick: () => setStep(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 17\n    }\n  }, i === curIndex ? /*#__PURE__*/React.createElement(miscIcons.smallEllipseActive, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(miscIcons.smallEllipseInactive, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 21\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mr-2 align-self-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }\n  }, isFirst ? /*#__PURE__*/React.createElement(Button, {\n    variant: \"no-show\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(miscIcons.smallLeftArrowDisabled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 19\n    }\n  })) : /*#__PURE__*/React.createElement(Button, {\n    variant: \"no-show\",\n    onClick: prevStep,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(miscIcons.smallLeftArrow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-2 align-self-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }\n  }, isLast ? // TODO customLastButton ||\n  lastButtonAsInactiveArrow && /*#__PURE__*/React.createElement(Button, {\n    variant: \"no-show\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(miscIcons.smallRightArrowDisabled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  })) || /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    className: \"m-0\",\n    onClick: submitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 19\n    }\n  }, lastButtonText) : /*#__PURE__*/React.createElement(Button, {\n    variant: \"no-show\",\n    onClick: nextStep,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(miscIcons.smallRightArrow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 19\n    }\n  })))))));\n};\n\nexport default WizardForm;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/WizardForm.tsx"],"names":["React","useEffect","useState","Modal","Button","miscIcons","WizardForm","children","show","setShow","title","onSubmit","initialStore","schemas","lastButtonAsInactiveArrow","lastButtonText","curIndex","setCurIndex","isFirst","setIsFirst","isLast","setIsLast","length","CurStep","setCurStep","store","setCompleteStore","validations","setValidations","map","undefined","exitWizardForm","combineSuccesses","v","Object","values","find","data","success","validatePickedValues","schema","toParse","toValidate","result","safeParse","changedErrors","fieldErrors","error","formErrors","reduce","pre","key","validateStep","i","stepValidations","keys","stepValidation","validateCurrent","setStep","step","Math","min","nextStep","dataIsValid","prevStep","submitForm","message","combined","cur","setStore","value","changedValues","changedEditedFields","prev","cloneElement","c"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { ZodSchema, ZodIssue } from 'zod';\nimport { miscIcons } from '../assets/icons/all';\n\ntype ValidationError =\n  | { success: true; error: undefined; data?: string }\n  | { success: false; error: ZodIssue; data?: string }; // TODO maybe make data just undefined here\n\ntype ValidationErrors<P> = Partial<\n  {\n    [key in keyof P]: ValidationError;\n  }\n>;\n\n/**\n * Each child component will be given:\n * - nextStep()/prevStep() function to navigate the form\n * - an exit() function to exit the form (i.e. when the user completes the form)\n * - a submitForm() which can be called when you would like to submit the form (it returns T/F based on success of onSubmit and validationChecks)\n * // TODO\n */\ntype SubmitForm = () => Promise<{ success: boolean; message?: string }>;\ntype SetStore<P> = (value: Partial<P>) => void;\nexport type WizardFormStep<P> = P & {\n  exitWizardForm: () => void;\n  nextStep: () => void;\n  prevStep: () => void;\n  setStep: (i: number) => void;\n  submitForm: SubmitForm; // returns success or failure with a message\n  validations: ValidationErrors<P> | undefined; // validation errors\n  setStore: SetStore<P>;\n};\n\n// T is whatever is in the store\ninterface WizardFormProps<T = {}> {\n  children: React.ReactElement[]; // the steps of the form (needs to be of length at least 0)\n  show: boolean;\n  setShow: (show: boolean) => void; // TODO this should be onHide! No need for the setShow(true)\n  title: string;\n  onSubmit: (store: T) => boolean;\n  initialStore: Partial<T>[];\n  schemas: ZodSchema<Partial<T>>[];\n  lastButtonAsInactiveArrow?: boolean;\n  // TODO customLastButton?: React.ReactElement<HTMLButtonElement>;\n  lastButtonText?: string;\n}\n\n/**\n * Not using React.FC as a work around to allow for generics for Wizard Form.\n * Do not do this normally. I will try to find a better way to do this\n */\n/**\n * Wizard Form React Component.\n */\nconst WizardForm = <T extends {}>({\n  children,\n  show,\n  setShow,\n  title,\n  onSubmit,\n  initialStore,\n  schemas,\n  lastButtonAsInactiveArrow,\n  // TODO customLastButton,\n  lastButtonText = 'Submit',\n}: WizardFormProps<T>) => {\n  const [curIndex, setCurIndex] = useState<number>(0);\n  const [isFirst, setIsFirst] = useState<boolean>(true);\n  const [isLast, setIsLast] = useState<boolean>(\n    curIndex === children.length - 1,\n  );\n  const [CurStep, setCurStep] = useState<React.ReactElement>(children[0]);\n\n  const [store, setCompleteStore] = useState<Array<Partial<T>>>(initialStore); // TODO maybe add useEffect so that whenever the initialStore changes, it updates the store (might cause issues tho, if the user makes changes and then we change the initialState, it'll override the changes). maybe what you should do is just not display the modal unless the show is true -- then you could have a useeffect on the show, and whenever the show becomes true, you should update the intialState with the current value?\n  // TODO const [curStore, setCurStore] = useState<>\n\n  // keeps track of the errors for each field\n  const [validations, setValidations] = useState<\n    Array<ValidationErrors<Partial<T>> | undefined>\n  >(children.map(() => undefined));\n  // TODO maybe add a thing to keep track of whether or not an entire step is validated. Then use this in the dots to display which have errors? (i.e. make them red dots)\n  // const [validSteps, setValidSteps] = useState<boolean[]>(\n  //   children.map(() => false),\n  // );\n  // TODO const [isCurStepValid, setIsCurStepValid] = useState<boolean>();\n\n  useEffect(() => {\n    setCurStep(children[curIndex]);\n    setIsFirst(curIndex === 0);\n    setIsLast(curIndex === children.length - 1);\n  }, [curIndex, children]);\n\n  // update if the current one is updated each time validations is updated\n  // TODO useEffect(() => {\n\n  // }, [validations, setIsCurStepValid]);\n\n  /**\n   * Use this to exit the wizard form without submitting.\n   */\n  const exitWizardForm = () => {\n    setShow(false);\n  };\n\n  const combineSuccesses = (v: ValidationErrors<Partial<T>>): boolean => {\n    return (\n      (Object.values(v) as Array<ValidationError>).find(\n        (data) => !data.success,\n      ) === undefined\n    );\n  };\n\n  const validatePickedValues = <P extends {} | unknown = unknown>(\n    schema: ZodSchema<P>,\n    toParse: Partial<P>,\n    toValidate: Array<keyof P>,\n  ) => {\n    const result = schema.safeParse(toParse);\n    let changedErrors: ValidationErrors<P> | undefined;\n    if (!result.success) {\n      const { fieldErrors } = result.error.formErrors;\n      changedErrors = toValidate.reduce(\n        (pre, key) => {\n          if (fieldErrors[key as string]) {\n            return {\n              ...pre,\n              [key]: { success: false, error: fieldErrors[key as string][0] },\n            };\n          }\n          return { ...pre, [key]: { success: true, error: undefined } };\n        },\n        { ...validations[curIndex] } as ValidationErrors<P>,\n      );\n    } else {\n      changedErrors = toValidate.reduce(\n        (pre, key) => ({ ...pre, [key]: { success: true, error: undefined } }),\n        { ...validations[curIndex] } as ValidationErrors<P>,\n      );\n    }\n    return changedErrors;\n  };\n\n  /**\n   * Validates and updates current step.\n   * @param i The step to validate.\n   * @return If the data is all valid.\n   */\n  const validateStep = (i: number): boolean => {\n    const stepValidations = validatePickedValues<Partial<T>>(\n      schemas[i],\n      store[i],\n      Object.keys(store[i]) as (keyof T)[],\n    );\n\n    setValidations({\n      ...validations,\n      [i]: { ...validations[i], ...stepValidations },\n    });\n\n    // TODO const noErrors = (Object.values(stepValidations) as Array<\n    //   { success: true; error: undefined } | { success: false; error: ZodIssue }\n    // >).reduce((pre, cur) => pre && cur.success, true);\n    const stepValidation: boolean = combineSuccesses(stepValidations);\n\n    // TODO setValidSteps({ ...validSteps, [i]: stepValidation });\n\n    return stepValidation;\n  };\n\n  /**\n   * Validates current form step.\n   * @return If the data is all valid.\n   */\n  const validateCurrent = (): boolean => {\n    // validate everything that hasn't been validated yet\n    return validateStep(curIndex);\n  };\n\n  /**\n   * Use this to navigate the wizard form to a specific step.\n   * This will validate all the steps from the current step\n   * to the selected step and navigate to either the first\n   * step that is invalid or to the selected step.\n   * @param step The step to change to.\n   */\n  const setStep = (step: number) => {\n    // if clicked a later step, validate all steps from current to the selected step\n    if (step > curIndex) {\n      for (let i = curIndex; i < Math.min(step, children.length); i++) {\n        if (!validateStep(i)) {\n          setCurIndex(i);\n          return;\n        }\n      }\n    }\n\n    // if reached here, all previous steps are valid\n    if (step <= 0) setCurIndex(0);\n    if (step >= children.length) setCurIndex(children.length - 1);\n    setCurIndex(step);\n  };\n\n  /**\n   * Use this to navigate the wizard form to the next step.\n   * This will first validate the current step and will\n   * move to the next one if possible.\n   */\n  const nextStep = () => {\n    // first validate\n    const dataIsValid = validateCurrent();\n\n    if (dataIsValid && curIndex + 1 < children.length) {\n      setCurIndex(curIndex + 1);\n    }\n  };\n\n  /**\n   * Use this to navigate the wizard form to the previous step.\n   */\n  const prevStep = () => {\n    if (curIndex - 1 >= 0) setCurIndex(curIndex - 1);\n  };\n\n  /**\n   * Use this to submit the form (it checks validation values first).\n   * Returns T/F based on success of validation values and onSubmit.\n   * (i.e. returns false if any validations are false, returns false\n   * if onSubmit returns false, otherwise returns true).\n   */\n  const submitForm: SubmitForm = async () => {\n    for (let i = curIndex; i < children.length; i++) {\n      if (!validateStep(i)) {\n        setCurIndex(i);\n        return { success: false, message: \"Didn't pass validation.\" };\n      }\n    }\n\n    // Everything should be validated by this point\n    const combined = Object.values(store).reduce((pre, cur) => ({\n      ...pre,\n      ...cur,\n    }));\n    const success = await onSubmit(combined as T);\n    if (success) exitWizardForm();\n    return { success };\n  };\n\n  const setStore: SetStore<T> = (value: Partial<T>) => {\n    const changedValues = { ...store[curIndex], ...value };\n    setCompleteStore({ ...store, [curIndex]: changedValues });\n\n    // get the changed edited fields and set that they were changed\n    const changedEditedFields = (Object.keys(value) as Array<keyof T>).reduce<\n      Partial<{ [key in keyof T]: boolean }>\n    >((prev, key) => {\n      prev[key] = true;\n      return prev;\n    }, {});\n\n    // every time there's a change, validate it\n    const changedErrors = validatePickedValues<Partial<T>>(\n      schemas[curIndex],\n      changedValues,\n      Object.keys(changedEditedFields) as (keyof T)[],\n    );\n\n    setValidations({\n      ...validations,\n      [curIndex]: { ...validations[curIndex], ...changedErrors },\n    });\n  };\n\n  // TODO need to figure out how to have loading thing on top\n  return (\n    <Modal\n      dialogClassName=\"wizard-form-modal-dialog\"\n      show={show}\n      onHide={() => setShow(false)}\n      centered\n    >\n      <div className=\"h-100 w-100\">\n        {/* TODO add border-radius to top and bottom rows */}\n        <div className=\"wizard-form-top-bar\">\n          <Button variant=\"no-show\" onClick={() => setShow(false)}>\n            <miscIcons.orangeX />\n          </Button>\n          <div className=\"title\">{title}</div>\n          {/* <span className=\"reset\">Reset</span> */}\n          <div />\n        </div>\n\n        {/* TODO <div className=\"d-flex align-items-center justify-content-around h-100\"> */}\n        <div className=\"wizard-form-middle\">\n          {React.cloneElement(CurStep, {\n            nextStep,\n            prevStep,\n            setStep,\n            exitWizardForm,\n            submitForm,\n            setStore,\n            validations: validations[curIndex],\n            ...store[curIndex],\n          })}\n        </div>\n\n        <div className=\"wizard-form-bottom-bar\">\n          <div className=\"d-flex\">\n            {children.map((c, i) => (\n              <div className=\"mx-1\">\n                <Button variant=\"no-show\" onClick={() => setStep(i)}>\n                  {i === curIndex ? (\n                    <miscIcons.smallEllipseActive />\n                  ) : (\n                    <miscIcons.smallEllipseInactive />\n                  )}\n                </Button>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"d-flex\">\n            <div className=\"mr-2 align-self-center\">\n              {isFirst ? (\n                <Button variant=\"no-show\">\n                  <miscIcons.smallLeftArrowDisabled />\n                </Button>\n              ) : (\n                <Button variant=\"no-show\" onClick={prevStep}>\n                  <miscIcons.smallLeftArrow />\n                </Button>\n              )}\n            </div>\n\n            <div className=\"ml-2 align-self-center\">\n              {isLast ? (\n                // TODO customLastButton ||\n                (lastButtonAsInactiveArrow && (\n                  <Button variant=\"no-show\">\n                    <miscIcons.smallRightArrowDisabled />\n                  </Button>\n                )) || (\n                  <Button\n                    variant=\"secondary\"\n                    className=\"m-0\"\n                    onClick={submitForm}\n                  >\n                    {lastButtonText}\n                  </Button>\n                )\n              ) : (\n                <Button variant=\"no-show\" onClick={nextStep}>\n                  <miscIcons.smallRightArrow />\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default WizardForm;\n"]},"metadata":{},"sourceType":"module"}