{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport Cookies from 'universal-cookie';\n// TODO\nimport { userLogIn, userLogOut } from '../../apis/index';\nconst cookies = new Cookies();\nconst initialState = {\n  user: cookies.get('user') // TODO temp for fake logged in user: {\n  //   name: 'Amit Bar',\n  //   email: \"'noneofyobusiness@gmail.com\",\n  //   imageUrl: 'image',\n  //   token: 'fake',\n  // },\n\n};\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      console.log('setting user');\n      state.user = action.payload;\n\n      if (action.payload) {\n        cookies.set('user', action.payload, {\n          maxAge: 4320 // expires  72 hours after login\n\n        });\n        console.log(action.payload.token);\n        console.log(cookies.get('access_token')); // cookies.set('access_token', action.payload.token);\n      } else {\n        cookies.remove('user');\n      }\n    }\n  }\n}); // Export actions that were defined with createSlice\n\nexport const {\n  setUser\n} = authSlice.actions; // Thunks here\n\nexport const login = (name, email) => async (dispatch) => {\n  console.log('logging in'); // login api function call here to the backend\n\n  const response = await userLogIn(name, email);\n\n  if (response) {\n    dispatch(setUser({\n      name: response.name,\n      email: response.email,\n      token: response.token\n    }));\n  }\n}; // TODO this doesn't seem to be able to handle when the cookie times out\n\nexport const logout = () => async (dispatch, getState) => {\n  var _getState$auth$user;\n\n  console.log('logging out'); // remove cookies here, which will automatically update the user\n\n  const token = (_getState$auth$user = getState().auth.user) === null || _getState$auth$user === void 0 ? void 0 : _getState$auth$user.token;\n  if (!token) return;\n  const response = await userLogOut(token);\n\n  if (response) {\n    console.log('dispatching the logout');\n    dispatch(setUser(undefined)); // TODO not sure if this is needed\n  }\n}; // Selects here\n\nconst selectUser = state => state.auth.user;\n\nexport { selectUser }; // Export everything\n\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/redux/slices/auth.ts"],"names":["createSlice","Cookies","userLogIn","userLogOut","cookies","initialState","user","get","authSlice","name","reducers","setUser","state","action","console","log","payload","set","maxAge","token","remove","actions","login","email","dispatch","response","logout","getState","auth","undefined","selectUser","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACgD;AAChD,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AAGA,MAAMC,OAAO,GAAG,IAAIH,OAAJ,EAAhB;AAMA,MAAMI,YAAuB,GAAG;AAC9BC,EAAAA,IAAI,EAAEF,OAAO,CAACG,GAAR,CAAkB,MAAlB,CADwB,CAE9B;AACA;AACA;AACA;AACA;AACA;;AAP8B,CAAhC;AAUA,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;AACnCS,EAAAA,IAAI,EAAE,MAD6B;AAEnCJ,EAAAA,YAFmC;AAGnCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAoD;AAC3DC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAH,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACG,OAApB;;AACA,UAAIH,MAAM,CAACG,OAAX,EAAoB;AAClBZ,QAAAA,OAAO,CAACa,GAAR,CAAY,MAAZ,EAAoBJ,MAAM,CAACG,OAA3B,EAAoC;AAClCE,UAAAA,MAAM,EAAE,IAD0B,CACpB;;AADoB,SAApC;AAGAJ,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAP,CAAeG,KAA3B;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYX,OAAO,CAACG,GAAR,CAAY,cAAZ,CAAZ,EALkB,CAMlB;AACD,OAPD,MAOO;AACLH,QAAAA,OAAO,CAACgB,MAAR,CAAe,MAAf;AACD;AACF;AAdO;AAHyB,CAAD,CAA7B,C,CAqBP;;AACA,OAAO,MAAM;AAAET,EAAAA;AAAF,IAAcH,SAAS,CAACa,OAA9B,C,CAEP;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACb,IAAD,EAAec,KAAf,KAA2C,OAC9DC,QAD8D,KAE3D;AACHV,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADG,CAEH;;AACA,QAAMU,QAAQ,GAAG,MAAMvB,SAAS,CAACO,IAAD,EAAOc,KAAP,CAAhC;;AACA,MAAIE,QAAJ,EAAc;AACZD,IAAAA,QAAQ,CACNb,OAAO,CAAC;AACNF,MAAAA,IAAI,EAAEgB,QAAQ,CAAChB,IADT;AAENc,MAAAA,KAAK,EAAEE,QAAQ,CAACF,KAFV;AAGNJ,MAAAA,KAAK,EAAEM,QAAQ,CAACN;AAHV,KAAD,CADD,CAAR;AAOD;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMO,MAAM,GAAG,MAAgB,OAAOF,QAAP,EAAiBG,QAAjB,KAA8B;AAAA;;AAClEb,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADkE,CAElE;;AACA,QAAMI,KAAK,0BAAGQ,QAAQ,GAAGC,IAAX,CAAgBtB,IAAnB,wDAAG,oBAAsBa,KAApC;AACA,MAAI,CAACA,KAAL,EAAY;AAEZ,QAAMM,QAAQ,GAAG,MAAMtB,UAAU,CAACgB,KAAD,CAAjC;;AACA,MAAIM,QAAJ,EAAc;AACZX,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAS,IAAAA,QAAQ,CAACb,OAAO,CAACkB,SAAD,CAAR,CAAR,CAFY,CAEkB;AAC/B;AACF,CAXM,C,CAaP;;AACA,MAAMC,UAAU,GAAIlB,KAAD,IAAsBA,KAAK,CAACgB,IAAN,CAAWtB,IAApD;;AAEA,SAASwB,UAAT,G,CAEA;;AACA,eAAetB,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport Cookies from 'universal-cookie';\nimport { AppThunk, RootState } from '../store'; // TODO\nimport { userLogIn, userLogOut } from '../../apis/index';\nimport { User } from '../../assets/models/User';\n\nconst cookies = new Cookies();\n\ninterface AuthState {\n  user?: User;\n}\n\nconst initialState: AuthState = {\n  user: cookies.get<User>('user'),\n  // TODO temp for fake logged in user: {\n  //   name: 'Amit Bar',\n  //   email: \"'noneofyobusiness@gmail.com\",\n  //   imageUrl: 'image',\n  //   token: 'fake',\n  // },\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action: PayloadAction<User | undefined>) => {\n      console.log('setting user');\n      state.user = action.payload;\n      if (action.payload) {\n        cookies.set('user', action.payload, {\n          maxAge: 4320, // expires  72 hours after login\n        });\n        console.log(action.payload.token);\n        console.log(cookies.get('access_token'));\n        // cookies.set('access_token', action.payload.token);\n      } else {\n        cookies.remove('user');\n      }\n    },\n  },\n});\n\n// Export actions that were defined with createSlice\nexport const { setUser } = authSlice.actions;\n\n// Thunks here\nexport const login = (name: string, email: string): AppThunk => async (\n  dispatch,\n) => {\n  console.log('logging in');\n  // login api function call here to the backend\n  const response = await userLogIn(name, email);\n  if (response) {\n    dispatch(\n      setUser({\n        name: response.name,\n        email: response.email,\n        token: response.token,\n      }),\n    );\n  }\n};\n\n// TODO this doesn't seem to be able to handle when the cookie times out\nexport const logout = (): AppThunk => async (dispatch, getState) => {\n  console.log('logging out');\n  // remove cookies here, which will automatically update the user\n  const token = getState().auth.user?.token;\n  if (!token) return;\n\n  const response = await userLogOut(token);\n  if (response) {\n    console.log('dispatching the logout');\n    dispatch(setUser(undefined)); // TODO not sure if this is needed\n  }\n};\n\n// Selects here\nconst selectUser = (state: RootState) => state.auth.user;\n\nexport { selectUser };\n\n// Export everything\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}