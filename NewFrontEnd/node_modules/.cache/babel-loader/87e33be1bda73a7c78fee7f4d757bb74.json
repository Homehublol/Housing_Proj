{"ast":null,"code":"/* eslint-disable @typescript-eslint/camelcase */\nimport { backendAPI } from './apiBases';\n\nconst getHousingPostsAPI = async () => {\n  try {\n    var _result$request;\n\n    const result = await backendAPI.get('/getRoom', {\n      withCredentials: true\n    });\n    console.log(result); // handle errors\n\n    if (((_result$request = result.request) === null || _result$request === void 0 ? void 0 : _result$request.status) !== 200) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst searchHousingPostsAPI = async ({\n  distance,\n  roomType,\n  priceMin,\n  priceMax,\n  earlyInterval,\n  earlyMonth,\n  lateInterval,\n  lateMonth,\n  stayPeriod,\n  other,\n  facilities,\n  numBeds,\n  numBaths\n}) => {\n  try {\n    var _result$request2;\n\n    const result = await backendAPI.post('/searchRoom', JSON.stringify({\n      distance,\n      room_type: roomType,\n      price_min: priceMin,\n      price_max: priceMax,\n      early_interval: earlyInterval,\n      early_month: earlyMonth,\n      late_interval: lateInterval,\n      late_month: lateMonth,\n      stay_period: stayPeriod,\n      other,\n      facilities,\n      numBeds,\n      numBaths\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(result); // handle errors\n\n    if (((_result$request2 = result.request) === null || _result$request2 === void 0 ? void 0 : _result$request2.status) !== 200) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst newHousingPostAPI = async (roomForm) => {\n  console.log('starting the new housing post api');\n\n  try {\n    var _result$request3;\n\n    // TODO distance calculation not working for some reason\n    // calculate distance to location\n    // const distance = await getDurationInMinutes(roomForm.location);\n    // console.log('distance');\n    // console.log(distance);\n    // if (!distance) {\n    // throw Error(\"Bad request - can't calculate the distance to the address.\");\n    // }\n    const formData = new FormData();\n    roomForm.photos.forEach(photo => formData.append('photos', photo));\n    formData.append('json', JSON.stringify({ ...roomForm,\n      photos: undefined,\n      distance: '15 min'\n    }));\n    const result = await backendAPI.post('/postRoom', // TODO { roomForm, distance: '15 min' },\n    formData, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      },\n      withCredentials: true\n    });\n    console.log(result, 'get result'); // handle errors\n\n    if (((_result$request3 = result.request) === null || _result$request3 === void 0 ? void 0 : _result$request3.status) !== 201) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst getHousingBookmarksAPI = async () => {\n  try {\n    var _result$request4;\n\n    const result = await backendAPI.get('/bookmark', {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(result);\n    if (((_result$request4 = result.request) === null || _result$request4 === void 0 ? void 0 : _result$request4.status) !== 200) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst addHousingBookmarkAPI = async roomId => {\n  try {\n    var _result$request5;\n\n    const result = await backendAPI.post('/bookmark', JSON.stringify({\n      room_id: roomId,\n      action: 'add'\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(result);\n    if (((_result$request5 = result.request) === null || _result$request5 === void 0 ? void 0 : _result$request5.status) !== 201) throw Error('Bad request');\n    return true;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst removeHousingBookmarkAPI = async roomId => {\n  try {\n    var _result$request6;\n\n    const result = await backendAPI.post('/bookmark', JSON.stringify({\n      room_id: roomId,\n      action: 'remove'\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(result);\n    if (((_result$request6 = result.request) === null || _result$request6 === void 0 ? void 0 : _result$request6.status) !== 200) throw Error('Bad request');\n    return true;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport { getHousingPostsAPI, searchHousingPostsAPI, newHousingPostAPI, getHousingBookmarksAPI, addHousingBookmarkAPI, removeHousingBookmarkAPI };","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/apis/housing.ts"],"names":["backendAPI","getHousingPostsAPI","result","get","withCredentials","console","log","request","status","Error","data","err","error","undefined","searchHousingPostsAPI","distance","roomType","priceMin","priceMax","earlyInterval","earlyMonth","lateInterval","lateMonth","stayPeriod","other","facilities","numBeds","numBaths","post","JSON","stringify","room_type","price_min","price_max","early_interval","early_month","late_interval","late_month","stay_period","headers","newHousingPostAPI","roomForm","formData","FormData","photos","forEach","photo","append","getHousingBookmarksAPI","addHousingBookmarkAPI","roomId","room_id","action","removeHousingBookmarkAPI"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\nimport {\n  CreateHousePostProperties,\n  HousePost,\n} from '../assets/models/PostModels';\nimport { FilterModel } from '../assets/models/FilterModel';\nimport { backendAPI } from './apiBases';\nimport { getDurationInMinutes } from '.';\n\nconst getHousingPostsAPI = async () => {\n  try {\n    const result = await backendAPI.get<HousePost[]>('/getRoom', {\n      withCredentials: true,\n    });\n    console.log(result);\n    // handle errors\n    if (result.request?.status !== 200) throw Error('Bad request');\n\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst searchHousingPostsAPI = async ({\n  distance,\n  roomType,\n  priceMin,\n  priceMax,\n  earlyInterval,\n  earlyMonth,\n  lateInterval,\n  lateMonth,\n  stayPeriod,\n  other,\n  facilities,\n  numBeds,\n  numBaths,\n}: FilterModel): Promise<HousePost[] | undefined> => {\n  try {\n    const result = await backendAPI.post(\n      '/searchRoom',\n      JSON.stringify({\n        distance,\n        room_type: roomType,\n        price_min: priceMin,\n        price_max: priceMax,\n        early_interval: earlyInterval,\n        early_month: earlyMonth,\n        late_interval: lateInterval,\n        late_month: lateMonth,\n        stay_period: stayPeriod,\n        other,\n        facilities,\n        numBeds,\n        numBaths,\n      }),\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(result);\n    // handle errors\n    if (result.request?.status !== 200) throw Error('Bad request');\n\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst newHousingPostAPI = async (\n  roomForm: CreateHousePostProperties & { email: string }, // TODO double check that this is the correct type for param, and you need to type the promise\n): Promise<any[] | undefined> => {\n  console.log('starting the new housing post api');\n  try {\n    // TODO distance calculation not working for some reason\n    // calculate distance to location\n    // const distance = await getDurationInMinutes(roomForm.location);\n    // console.log('distance');\n    // console.log(distance);\n    // if (!distance) {\n    // throw Error(\"Bad request - can't calculate the distance to the address.\");\n    // }\n\n    const formData = new FormData();\n    roomForm.photos.forEach((photo) => formData.append('photos', photo));\n    formData.append(\n      'json',\n      JSON.stringify({ ...roomForm, photos: undefined, distance: '15 min' }),\n    );\n\n    const result = await backendAPI.post(\n      '/postRoom',\n      // TODO { roomForm, distance: '15 min' },\n      formData,\n      {\n        headers: {\n          'content-type': 'multipart/form-data',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(result, 'get result');\n    // handle errors\n    if (result.request?.status !== 201) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst getHousingBookmarksAPI = async () => {\n  try {\n    const result = await backendAPI.get<HousePost[]>('/bookmark', {\n      headers: {\n        'content-type': 'application/json',\n      },\n      withCredentials: true,\n    });\n    console.log(result);\n    if (result.request?.status !== 200) throw Error('Bad request');\n\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst addHousingBookmarkAPI = async (roomId: number) => {\n  try {\n    const result = await backendAPI.post(\n      '/bookmark',\n      JSON.stringify({ room_id: roomId, action: 'add' }),\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(result);\n    if (result.request?.status !== 201) throw Error('Bad request');\n\n    return true;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst removeHousingBookmarkAPI = async (roomId: number) => {\n  try {\n    const result = await backendAPI.post(\n      '/bookmark',\n      JSON.stringify({ room_id: roomId, action: 'remove' }),\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(result);\n    if (result.request?.status !== 200) throw Error('Bad request');\n\n    return true;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport {\n  getHousingPostsAPI,\n  searchHousingPostsAPI,\n  newHousingPostAPI,\n  getHousingBookmarksAPI,\n  addHousingBookmarkAPI,\n  removeHousingBookmarkAPI,\n};\n"]},"metadata":{},"sourceType":"module"}