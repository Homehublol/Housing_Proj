{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { updateHousingPosts } from './housing';\nimport { getHousing } from '../../apis/index';\nconst initialState = {\n  post: {\n    stayPeriod: 1,\n    earlyInterval: 'Anytime',\n    earlyMonth: 'Anytime',\n    lateInterval: 'Anytime',\n    lateMonth: 'Anytime',\n    other: [],\n    facilities: [],\n    distance: 'unknown'\n  },\n  photo: []\n};\nexport const postSlice = createSlice({\n  name: 'housePost',\n  initialState,\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    setPost: (state, action) => {\n      state.post[action.payload[0]] = action.payload[1];\n      console.log(action.payload);\n    },\n    setPicture: (state, action) => {\n      console.log(action.payload);\n      state.photo = action.payload;\n    }\n  }\n});\nexport const {\n  setPost,\n  setPicture\n} = postSlice.actions;\n\nconst selectPost = state => state.housePost.post;\n\nconst selectPicture = state => state.housePost.photo;\n\nexport { selectPost, selectPicture };\nexport const userPost = apiCall => dispatch => {\n  apiCall().then(response => {\n    // TODO should be informing user new post is created!\n    // refresh the page with new posting\n    console.log(response);\n    dispatch(updateHousingPosts(getHousing));\n  });\n};\nexport default postSlice.reducer;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/redux/slices/posting.ts"],"names":["createSlice","updateHousingPosts","getHousing","initialState","post","stayPeriod","earlyInterval","earlyMonth","lateInterval","lateMonth","other","facilities","distance","photo","postSlice","name","reducers","setPost","state","action","payload","console","log","setPicture","actions","selectPost","housePost","selectPicture","userPost","apiCall","dispatch","then","response","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SAAyBC,kBAAzB,QAAmD,WAAnD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAoCA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,CADR;AAEJC,IAAAA,aAAa,EAAE,SAFX;AAGJC,IAAAA,UAAU,EAAE,SAHR;AAIJC,IAAAA,YAAY,EAAE,SAJV;AAKJC,IAAAA,SAAS,EAAE,SALP;AAMJC,IAAAA,KAAK,EAAE,EANH;AAOJC,IAAAA,UAAU,EAAE,EAPR;AAQJC,IAAAA,QAAQ,EAAE;AARN,GAD4B;AAWlCC,EAAAA,KAAK,EAAE;AAX2B,CAApC;AAcA,OAAO,MAAMC,SAAS,GAAGd,WAAW,CAAC;AACnCe,EAAAA,IAAI,EAAE,WAD6B;AAEnCZ,EAAAA,YAFmC;AAGnCa,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAaC,MAAb,KAA8C;AACrDD,MAAAA,KAAK,CAACd,IAAN,CAAWe,MAAM,CAACC,OAAP,CAAe,CAAf,CAAX,IAAgCD,MAAM,CAACC,OAAP,CAAe,CAAf,CAAhC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,OAAnB;AACD,KALO;AAMRG,IAAAA,UAAU,EAAE,CAACL,KAAD,EAAaC,MAAb,KAA+C;AACzDE,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,OAAnB;AACAF,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACD;AATO;AAHyB,CAAD,CAA7B;AAeP,OAAO,MAAM;AAAEH,EAAAA,OAAF;AAAWM,EAAAA;AAAX,IAA0BT,SAAS,CAACU,OAA1C;;AAEP,MAAMC,UAAU,GAAIP,KAAD,IAAsBA,KAAK,CAACQ,SAAN,CAAgBtB,IAAzD;;AACA,MAAMuB,aAAa,GAAIT,KAAD,IAAsBA,KAAK,CAACQ,SAAN,CAAgBb,KAA5D;;AACA,SAASY,UAAT,EAAqBE,aAArB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,OAAD,IAAwCC,QAAD,IAAc;AAC3ED,EAAAA,OAAO,GAAGE,IAAV,CAAgBC,QAAD,IAAmB;AAChC;AACA;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACAF,IAAAA,QAAQ,CAAC7B,kBAAkB,CAACC,UAAD,CAAnB,CAAR;AACD,GALD;AAMD,CAPM;AASP,eAAeY,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../store';\nimport { HousingAPICall, updateHousingPosts } from './housing';\nimport { getHousing } from '../../apis/index';\n\nexport interface UserPost {\n  // PostPage1\n  name?: string;\n  leaserSchoolYear?: string;\n  leaserMajor?: string;\n  leaserEmail?: string;\n  leaserPhone?: string;\n\n  // PostPage2\n  price?: number;\n  roomType?: string;\n  address?: string;\n  distance: string;\n\n  // PostPage3\n  stayPeriod: number;\n  earlyInterval: string;\n  earlyMonth: string;\n  lateInterval: string;\n  lateMonth: string;\n\n  // PostPage4\n  other: string[];\n  facilities: string[];\n\n  // PostPage5\n  leaserIntro?: string;\n}\n\ninterface UserPostState {\n  post: UserPost;\n  photo: File[];\n}\n\nconst initialState: UserPostState = {\n  post: {\n    stayPeriod: 1,\n    earlyInterval: 'Anytime',\n    earlyMonth: 'Anytime',\n    lateInterval: 'Anytime',\n    lateMonth: 'Anytime',\n    other: [],\n    facilities: [],\n    distance: 'unknown',\n  },\n  photo: [],\n};\n\nexport const postSlice = createSlice({\n  name: 'housePost',\n  initialState,\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    setPost: (state: any, action: PayloadAction<any[]>) => {\n      state.post[action.payload[0]] = action.payload[1];\n      console.log(action.payload);\n    },\n    setPicture: (state: any, action: PayloadAction<File[]>) => {\n      console.log(action.payload);\n      state.photo = action.payload;\n    },\n  },\n});\nexport const { setPost, setPicture } = postSlice.actions;\n\nconst selectPost = (state: RootState) => state.housePost.post;\nconst selectPicture = (state: RootState) => state.housePost.photo;\nexport { selectPost, selectPicture };\n\nexport const userPost = (apiCall: HousingAPICall): AppThunk => (dispatch) => {\n  apiCall().then((response: any) => {\n    // TODO should be informing user new post is created!\n    // refresh the page with new posting\n    console.log(response);\n    dispatch(updateHousingPosts(getHousing));\n  });\n};\n\nexport default postSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}