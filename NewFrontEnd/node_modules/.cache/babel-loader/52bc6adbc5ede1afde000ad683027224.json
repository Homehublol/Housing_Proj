{"ast":null,"code":"import { intervalOptions, monthsUnabrvToAbrv, yearMonths, Month } from '../constants';\n/**\n * Use to define validation checks for an object T.\n */\n\n/**\n * Function used to validate move in select form\n * @param earlyMonth - the early month selected\n * @param earlyInterval - the early interval selected\n * @param lateMonth - the late month selected\n * @param lateInterval - the late interval selected\n */\nconst moveInSelect = (earlyMonth, earlyInterval, lateMonth, lateInterval) => {\n  if (yearMonths.indexOf(earlyMonth) > yearMonths.indexOf(lateMonth)) {\n    // neither has anytime as the option\n    if (![earlyMonth, lateMonth].includes(Month.Anytime)) {\n      return false;\n    }\n  }\n\n  if (yearMonths.indexOf(earlyMonth) === yearMonths.indexOf(lateMonth) && ![earlyMonth, lateMonth].includes(Month.Anytime)) {\n    // neither has anytime as the option\n    if (![earlyInterval, lateInterval].includes(Month.Anytime) && intervalOptions.indexOf(earlyInterval) > intervalOptions.indexOf(lateInterval)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Use to abbreviate a month\n * @param month - the month to abbreviate (must be in the enum 'months')\n */\n\n\nconst abbreviateMonth = month => monthsUnabrvToAbrv[month];\n/**\n * Use to abbreviate address to only everything before the first comma\n */\n\n\nconst abbreviateAddress = address => address.split(',')[0];\n/**\n * Use to remove parentheses and everything inside the parentheses\n */\n\n\nconst removeParentheses = str => str.replace(/ *\\([^)]*\\) */g, '');\n\nexport { moveInSelect, abbreviateMonth, abbreviateAddress, removeParentheses };","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/assets/utils/index.tsx"],"names":["intervalOptions","monthsUnabrvToAbrv","yearMonths","Month","moveInSelect","earlyMonth","earlyInterval","lateMonth","lateInterval","indexOf","includes","Anytime","abbreviateMonth","month","abbreviateAddress","address","split","removeParentheses","str","replace"],"mappings":"AAAA,SACEA,eADF,EAGEC,kBAHF,EAIEC,UAJF,EAKEC,KALF,QAMO,cANP;AAQA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CACnBC,UADmB,EAEnBC,aAFmB,EAGnBC,SAHmB,EAInBC,YAJmB,KAKP;AACZ,MAAIN,UAAU,CAACO,OAAX,CAAmBJ,UAAnB,IAAiCH,UAAU,CAACO,OAAX,CAAmBF,SAAnB,CAArC,EAAoE;AAClE;AACA,QAAI,CAAC,CAACF,UAAD,EAAaE,SAAb,EAAwBG,QAAxB,CAAiCP,KAAK,CAACQ,OAAvC,CAAL,EAAsD;AACpD,aAAO,KAAP;AACD;AACF;;AACD,MACET,UAAU,CAACO,OAAX,CAAmBJ,UAAnB,MAAmCH,UAAU,CAACO,OAAX,CAAmBF,SAAnB,CAAnC,IACA,CAAC,CAACF,UAAD,EAAaE,SAAb,EAAwBG,QAAxB,CAAiCP,KAAK,CAACQ,OAAvC,CAFH,EAGE;AACA;AACA,QACE,CAAC,CAACL,aAAD,EAAgBE,YAAhB,EAA8BE,QAA9B,CAAuCP,KAAK,CAACQ,OAA7C,CAAD,IACAX,eAAe,CAACS,OAAhB,CAAwBH,aAAxB,IACEN,eAAe,CAACS,OAAhB,CAAwBD,YAAxB,CAHJ,EAIE;AACA,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CA1BD;AA4BA;AACA;AACA;AACA;;;AACA,MAAMI,eAAe,GAAIC,KAAD,IAA6BZ,kBAAkB,CAACY,KAAD,CAAvE;AAEA;AACA;AACA;;;AACA,MAAMC,iBAAiB,GAAIC,OAAD,IAA6BA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAvD;AAEA;AACA;AACA;;;AACA,MAAMC,iBAAiB,GAAIC,GAAD,IACxBA,GAAG,CAACC,OAAJ,CAAY,gBAAZ,EAA8B,EAA9B,CADF;;AAGA,SAASf,YAAT,EAAuBQ,eAAvB,EAAwCE,iBAAxC,EAA2DG,iBAA3D","sourcesContent":["import {\n  intervalOptions,\n  MonthAbrv,\n  monthsUnabrvToAbrv,\n  yearMonths,\n  Month,\n} from '../constants';\n\n/**\n * Use to define validation checks for an object T.\n */\nexport type ObjectValidationChecks<T> = {\n  [key in keyof T]: (value: T[key]) => boolean;\n};\n\n/**\n * Use as a type for \"one of the variables from P\".\n */\nexport type OneFrom<P> = { [K in keyof P]: Pick<P, K> };\n\n/**\n * Function used to validate move in select form\n * @param earlyMonth - the early month selected\n * @param earlyInterval - the early interval selected\n * @param lateMonth - the late month selected\n * @param lateInterval - the late interval selected\n */\nconst moveInSelect = (\n  earlyMonth: string,\n  earlyInterval: string,\n  lateMonth: string,\n  lateInterval: string,\n): boolean => {\n  if (yearMonths.indexOf(earlyMonth) > yearMonths.indexOf(lateMonth)) {\n    // neither has anytime as the option\n    if (![earlyMonth, lateMonth].includes(Month.Anytime)) {\n      return false;\n    }\n  }\n  if (\n    yearMonths.indexOf(earlyMonth) === yearMonths.indexOf(lateMonth) &&\n    ![earlyMonth, lateMonth].includes(Month.Anytime)\n  ) {\n    // neither has anytime as the option\n    if (\n      ![earlyInterval, lateInterval].includes(Month.Anytime) &&\n      intervalOptions.indexOf(earlyInterval) >\n        intervalOptions.indexOf(lateInterval)\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Use to abbreviate a month\n * @param month - the month to abbreviate (must be in the enum 'months')\n */\nconst abbreviateMonth = (month: Month): MonthAbrv => monthsUnabrvToAbrv[month];\n\n/**\n * Use to abbreviate address to only everything before the first comma\n */\nconst abbreviateAddress = (address: string): string => address.split(',')[0];\n\n/**\n * Use to remove parentheses and everything inside the parentheses\n */\nconst removeParentheses = (str: string): string =>\n  str.replace(/ *\\([^)]*\\) */g, '');\n\nexport { moveInSelect, abbreviateMonth, abbreviateAddress, removeParentheses };\n"]},"metadata":{},"sourceType":"module"}