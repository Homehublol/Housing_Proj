{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/GoogleMap.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nconst AnyReactComponent = ({\n  text\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 46\n  }\n}, text);\n\nconst GoogleMap = ({\n  address\n}) => {\n  const [center, setCenter] = useState({\n    lat: 11.0168,\n    lng: 76.9558\n  });\n  const [zoom, setZoom] = useState(11);\n  useEffect(() => {\n    // Mounted is needed for React (not always necessary). You can only update a component's\n    // state when it is mounted -- we potentially set the state after it is already unmounted\n    // because of the async calls. Thus, we need to check if it is mounted before updating the state\n    let mounted = true; // function that gets and sets the map pin\n\n    const setMapPin = async () => {\n      const code = await geocodeByAddress(address);\n      const location = await getLatLng(code[0]);\n      if (mounted) setCenter(location);\n    };\n\n    setMapPin();\n    return () => {\n      mounted = false;\n    };\n  }, [address, setCenter]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"google-map-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: 'AIzaSyDP7ZDv6xGzfVe7y7Sgb3MsYMqCVLNljeY'\n    } // TODO put key in an .env\n    ,\n    center: center,\n    defaultZoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AnyReactComponent, {\n    lat: center.lat,\n    lng: center.lng,\n    text: \"I am Here!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default GoogleMap;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/GoogleMap.tsx"],"names":["React","useEffect","useState","GoogleMapReact","geocodeByAddress","getLatLng","AnyReactComponent","text","GoogleMap","address","center","setCenter","lat","lng","zoom","setZoom","mounted","setMapPin","code","location","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,2BAA5C;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAMA,IAAN,CAA7C;;AAKA,MAAMC,SAA8B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACtD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC;AAAEU,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAAD,CAApC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA,QAAIe,OAAO,GAAG,IAAd,CAJc,CAMd;;AACA,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,IAAI,GAAG,MAAMd,gBAAgB,CAACK,OAAD,CAAnC;AACA,YAAMU,QAAQ,GAAG,MAAMd,SAAS,CAACa,IAAI,CAAC,CAAD,CAAL,CAAhC;AACA,UAAIF,OAAJ,EAAaL,SAAS,CAACQ,QAAD,CAAT;AACd,KAJD;;AAKAF,IAAAA,SAAS;AAET,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACP,OAAD,EAAUE,SAAV,CAjBM,CAAT;AAmBA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAE;AAAES,MAAAA,GAAG,EAAE;AAAP,KADpB,CACwE;AADxE;AAEE,IAAA,MAAM,EAAEV,MAFV;AAGE,IAAA,WAAW,EAAEI,IAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,iBAAD;AACE,IAAA,GAAG,EAAEJ,MAAM,CAACE,GADd;AAEE,IAAA,GAAG,EAAEF,MAAM,CAACG,GAFd;AAGE,IAAA,IAAI,EAAC,YAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF;AAeD,CAtCD;;AAwCA,eAAeL,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nconst AnyReactComponent = ({ text }: any) => <div>{text}</div>;\n\ninterface PathProps {\n  address: string;\n}\nconst GoogleMap: React.FC<PathProps> = ({ address }) => {\n  const [center, setCenter] = useState({ lat: 11.0168, lng: 76.9558 });\n  const [zoom, setZoom] = useState(11);\n\n  useEffect(() => {\n    // Mounted is needed for React (not always necessary). You can only update a component's\n    // state when it is mounted -- we potentially set the state after it is already unmounted\n    // because of the async calls. Thus, we need to check if it is mounted before updating the state\n    let mounted = true;\n\n    // function that gets and sets the map pin\n    const setMapPin = async () => {\n      const code = await geocodeByAddress(address);\n      const location = await getLatLng(code[0]);\n      if (mounted) setCenter(location);\n    };\n    setMapPin();\n\n    return () => {\n      mounted = false;\n    };\n  }, [address, setCenter]);\n\n  return (\n    <div className=\"google-map-wrapper\">\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: 'AIzaSyDP7ZDv6xGzfVe7y7Sgb3MsYMqCVLNljeY' }} // TODO put key in an .env\n        center={center}\n        defaultZoom={zoom}\n      >\n        <AnyReactComponent\n          lat={center.lat}\n          lng={center.lng}\n          text=\"I am Here!\"\n        />\n      </GoogleMapReact>\n    </div>\n  );\n};\n\nexport default GoogleMap;\n"]},"metadata":{},"sourceType":"module"}