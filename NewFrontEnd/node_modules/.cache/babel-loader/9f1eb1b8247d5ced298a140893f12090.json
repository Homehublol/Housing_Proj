{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/basics/Toggle.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\n\nconst Toggle = ({\n  label,\n  hideLabel,\n  icon,\n  iconConfig,\n  selected,\n  initialSelected = false,\n  className = '',\n  onClick,\n  children,\n  ...buttonProps\n}) => {\n  const [isSelected, setIsSelected] = useState(initialSelected);\n  const [Icon, setIcon] = useState(icon);\n  useEffect(() => {\n    if (selected !== undefined) setIsSelected(selected);\n  }, [selected]);\n  useEffect(() => {\n    setIcon(icon);\n  }, [icon]);\n  return /*#__PURE__*/React.createElement(Button, Object.assign({\n    variant: \"\"\n  }, buttonProps, {\n    className: (isSelected ? 'homehub-toggle-selected ' : 'homehub-toggle-unselected ') + className,\n    onClick: e => {\n      if (onClick) onClick(!isSelected, e);\n      setIsSelected(!isSelected);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, Object.assign({\n    className: \"homehub-toggle-icon\"\n  }, iconConfig, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 18\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, !hideLabel && label), children);\n};\n\nexport default Toggle;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/basics/Toggle.tsx"],"names":["React","useState","useEffect","Button","Toggle","label","hideLabel","icon","iconConfig","selected","initialSelected","className","onClick","children","buttonProps","isSelected","setIsSelected","Icon","setIcon","undefined","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAoC,iBAApC;;AAgBA,MAAMC,MAA6B,GAAG,CAAC;AACrCC,EAAAA,KADqC;AAErCC,EAAAA,SAFqC;AAGrCC,EAAAA,IAHqC;AAIrCC,EAAAA,UAJqC;AAKrCC,EAAAA,QALqC;AAMrCC,EAAAA,eAAe,GAAG,KANmB;AAOrCC,EAAAA,SAAS,GAAG,EAPyB;AAQrCC,EAAAA,OARqC;AASrCC,EAAAA,QATqC;AAUrC,KAAGC;AAVkC,CAAD,KAWhC;AACJ,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAUS,eAAV,CAA5C;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAuBM,IAAvB,CAAhC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,QAAQ,KAAKU,SAAjB,EAA4BH,aAAa,CAACP,QAAD,CAAb;AAC7B,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO,CAACX,IAAD,CAAP;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC;AADV,KAEMO,WAFN;AAGE,IAAA,SAAS,EACP,CAACC,UAAU,GACP,0BADO,GAEP,4BAFJ,IAEoCJ,SANxC;AAQE,IAAA,OAAO,EAAGS,CAAD,IAAO;AACd,UAAIR,OAAJ,EAAaA,OAAO,CAAC,CAACG,UAAF,EAAcK,CAAd,CAAP;AACbJ,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA0CT,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADX,CAbF,eAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,CAACF,SAAD,IAAcD,KAApB,CAhBF,EAiBGQ,QAjBH,CADF;AAqBD,CA5CD;;AA8CA,eAAeT,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, ButtonProps } from 'react-bootstrap';\nimport { Icon as IconType, IconProps } from '../../assets/icons/all';\n\ninterface ToggleProps extends Omit<ButtonProps, 'onClick'> {\n  label: string;\n  hideLabel?: boolean;\n  icon?: IconType;\n  iconConfig?: IconProps;\n  selected?: boolean;\n  initialSelected?: boolean;\n  onClick?: (\n    selected: boolean,\n    e: React.MouseEvent<HTMLElement, MouseEvent>,\n  ) => any;\n}\n\nconst Toggle: React.FC<ToggleProps> = ({\n  label,\n  hideLabel,\n  icon,\n  iconConfig,\n  selected,\n  initialSelected = false,\n  className = '',\n  onClick,\n  children,\n  ...buttonProps\n}) => {\n  const [isSelected, setIsSelected] = useState<boolean>(initialSelected);\n  const [Icon, setIcon] = useState<IconType | undefined>(icon);\n\n  useEffect(() => {\n    if (selected !== undefined) setIsSelected(selected);\n  }, [selected]);\n\n  useEffect(() => {\n    setIcon(icon);\n  }, [icon]);\n\n  return (\n    <Button\n      variant=\"\"\n      {...buttonProps}\n      className={\n        (isSelected\n          ? 'homehub-toggle-selected '\n          : 'homehub-toggle-unselected ') + className\n      }\n      onClick={(e) => {\n        if (onClick) onClick(!isSelected, e);\n        setIsSelected(!isSelected);\n      }}\n    >\n      <div>\n        {Icon && <Icon className=\"homehub-toggle-icon\" {...iconConfig} />}\n      </div>\n      <div>{!hideLabel && label}</div>\n      {children}\n    </Button>\n  );\n};\n\nexport default Toggle;\n"]},"metadata":{},"sourceType":"module"}