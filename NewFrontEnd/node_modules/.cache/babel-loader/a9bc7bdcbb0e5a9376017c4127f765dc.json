{"ast":null,"code":"import { backendAPI } from './apiBases';\n\n/**\n * Login a user to a session.\n * @param name - the user's name\n * @param email - the user's email\n * @param imageUrl - the user's profile image Url\n * @returns - undefined if error occured, otherwise UserLoginResponse, which includes an access token,\n *            email, message, user, imageUrl\n */\nconst userLogIn = async (name, email) => {\n  try {\n    var _response$request;\n\n    const response = await backendAPI.post('/login', JSON.stringify({\n      name,\n      email\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (((_response$request = response.request) === null || _response$request === void 0 ? void 0 : _response$request.status) !== 200) throw Error('Bad request');\n    return response.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n}; // export interface UserLogoutResponse {\n//   // TODO\n// }\n\n/**\n * Logout a user from a session.\n * @param token - the token for the user's session.\n * @returns - undefined if error occured, string result message otherwise\n */\n\n\nconst userLogOut = async token => {\n  try {\n    var _response$request2;\n\n    const response = await backendAPI.post('/logout', // eslint-disable-next-line @typescript-eslint/camelcase\n    {\n      access_token: token\n    }, {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(response);\n    if (((_response$request2 = response.request) === null || _response$request2 === void 0 ? void 0 : _response$request2.status) !== 200) throw Error('Bad request');\n    return response.data;\n  } catch (err) {\n    console.error(`Logout error: ${err}`);\n    return undefined;\n  }\n};\n\nexport { userLogIn, userLogOut };","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/apis/user.ts"],"names":["backendAPI","userLogIn","name","email","response","post","JSON","stringify","headers","withCredentials","request","status","Error","data","err","console","error","undefined","userLogOut","token","access_token","log"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,OAChBC,IADgB,EAEhBC,KAFgB,KAG2B;AAC3C,MAAI;AAAA;;AACF,UAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACK,IAAX,CACrB,QADqB,EAErBC,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAf,CAFqB,EAGrB;AACEK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OADX;AAIEC,MAAAA,eAAe,EAAE;AAJnB,KAHqB,CAAvB;AAWA,QAAI,sBAAAL,QAAQ,CAACM,OAAT,wEAAkBC,MAAlB,MAA6B,GAAjC,EAAsC,MAAMC,KAAK,CAAC,aAAD,CAAX;AACtC,WAAOR,QAAQ,CAACS,IAAhB;AACD,GAdD,CAcE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,WAAOG,SAAP;AACD;AACF,CAtBD,C,CAwBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAsD;AACvE,MAAI;AAAA;;AACF,UAAMf,QAAQ,GAAG,MAAMJ,UAAU,CAACK,IAAX,CACrB,SADqB,EAErB;AACA;AAAEe,MAAAA,YAAY,EAAED;AAAhB,KAHqB,EAIrB;AACEX,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OADX;AAIEC,MAAAA,eAAe,EAAE;AAJnB,KAJqB,CAAvB;AAWAM,IAAAA,OAAO,CAACM,GAAR,CAAYjB,QAAZ;AAEA,QAAI,uBAAAA,QAAQ,CAACM,OAAT,0EAAkBC,MAAlB,MAA6B,GAAjC,EAAsC,MAAMC,KAAK,CAAC,aAAD,CAAX;AACtC,WAAOR,QAAQ,CAACS,IAAhB;AACD,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAe,iBAAgBF,GAAI,EAAnC;AACA,WAAOG,SAAP;AACD;AACF,CArBD;;AAuBA,SAAShB,SAAT,EAAoBiB,UAApB","sourcesContent":["import { backendAPI } from './apiBases';\n\nexport interface UserLoginResponse {\n  access_token: string;\n  email: string;\n  message: string;\n  user: string; // the user's name\n  imageUrl: string; // TODO i don't get an imageurl when logging in for some reason?\n}\n\n/**\n * Login a user to a session.\n * @param name - the user's name\n * @param email - the user's email\n * @param imageUrl - the user's profile image Url\n * @returns - undefined if error occured, otherwise UserLoginResponse, which includes an access token,\n *            email, message, user, imageUrl\n */\nconst userLogIn = async (\n  name: string,\n  email: string,\n): Promise<UserLoginResponse | undefined> => {\n  try {\n    const response = await backendAPI.post(\n      '/login',\n      JSON.stringify({ name, email }),\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n\n    if (response.request?.status !== 200) throw Error('Bad request');\n    return response.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\n// export interface UserLogoutResponse {\n//   // TODO\n// }\n\n/**\n * Logout a user from a session.\n * @param token - the token for the user's session.\n * @returns - undefined if error occured, string result message otherwise\n */\nconst userLogOut = async (token: string): Promise<string | undefined> => {\n  try {\n    const response = await backendAPI.post(\n      '/logout',\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      { access_token: token },\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(response);\n\n    if (response.request?.status !== 200) throw Error('Bad request');\n    return response.data;\n  } catch (err) {\n    console.error(`Logout error: ${err}`);\n    return undefined;\n  }\n};\n\nexport { userLogIn, userLogOut };\n"]},"metadata":{},"sourceType":"module"}