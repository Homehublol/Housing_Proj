{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/basics/Dropdown.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Form } from 'react-bootstrap';\nimport BootstrapDropdown from 'react-bootstrap/Dropdown';\n\n// TODO make this its own component/file\nconst useClickAwayListener = (refs, onClickAway, active = true) => {\n  useEffect(() => {\n    const handleClickAway = e => {\n      if (active && e.target !== null && !refs.find(ref => ref && ref.current && ref.current.contains(e.target))) {\n        onClickAway(e);\n      }\n    }; // Bind the event listener\n\n\n    document.addEventListener('click', handleClickAway);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('click', handleClickAway);\n    };\n  }, [refs, onClickAway, active]);\n};\n\nconst Dropdown = ({\n  label,\n  labelClassName = '',\n  error,\n  errorClassName = '',\n  initialSelected,\n  placeholder,\n  isInvalid,\n  isValid,\n  // only provide this if you want a green checkmark. Should only be provided when multiple dropdowns are working in unison\n  required,\n  noFilter,\n  inlineText,\n  inlineTextClassName = '',\n  className = '',\n  options,\n  onSelect,\n  ...dropdownProps\n}) => {\n  const [selected, setSelected] = useState(initialSelected);\n  const [isEmpty, setIsEmpty] = useState(!selected || selected === '');\n  const [isFocused, setIsFocused] = useState(false);\n  const [filter, setFilter] = useState();\n  const [filteredOptions, setFilteredOptions] = useState(options);\n  const dropdownRef = useRef();\n  const dropdownMenuRef = useRef(null);\n  useClickAwayListener([dropdownRef, dropdownMenuRef], () => setFilter(undefined), !noFilter);\n\n  const updateIsEmpty = s => {\n    if (s) setIsEmpty(!s || s === '');else setIsEmpty(!selected || selected === '');\n  };\n\n  useEffect(() => {\n    const filtered = options.filter(option => option.toLowerCase().includes((filter === null || filter === void 0 ? void 0 : filter.toLowerCase()) || '') // TODO for some reason filtering with a space causes issues?\n    );\n    setFilteredOptions(filtered);\n  }, [filter, options]);\n  return /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, (label || required) && /*#__PURE__*/React.createElement(Form.Label, {\n    className: `dropdown-label ${labelClassName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, label, required && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-required-asterisk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 24\n    }\n  }, \" *\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BootstrapDropdown, Object.assign({\n    onSelect: (s, e) => {\n      setSelected(s || undefined);\n      updateIsEmpty(s);\n      setFilter(undefined);\n      if (onSelect) onSelect(s, e);\n    },\n    ref: dropdownRef,\n    className: `homehub-dropdown ${className}`\n  }, dropdownProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BootstrapDropdown.Toggle, {\n    variant: \"no-show\",\n    className: \"dropdown-toggle\",\n    onFocus: () => setIsFocused(true),\n    onBlur: () => setIsFocused(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex flex-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    value: filter !== undefined ? filter : selected || '',\n    placeholder: placeholder,\n    className: `${(isEmpty && !isFocused ? 'dropdown-unfilled ' : 'dropdown-filled ') + (isInvalid || error ? 'dropdown-invalid ' : '')} dropdown-straighten-right`,\n    isValid: isValid,\n    readOnly: noFilter,\n    onChange: e => {\n      if (!noFilter) setFilter(e.target.value);\n    },\n    onFocus: () => {\n      if (!noFilter) setFilter('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: (isEmpty && !isFocused ? 'dropdown-drop-btn-unfilled ' : 'dropdown-drop-btn-filled ') + (isInvalid || error ? 'dropdown-drop-btn-invalid ' : ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-drop-btn-arrow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(BootstrapDropdown.Menu, {\n    ref: dropdownMenuRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, filteredOptions.map(option => /*#__PURE__*/React.createElement(BootstrapDropdown.Item, {\n    key: option,\n    eventKey: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, option)))), inlineText && /*#__PURE__*/React.createElement(\"div\", {\n    className: `dropdown-inline-text ${inlineTextClassName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, inlineText)), error && /*#__PURE__*/React.createElement(Form.Label, {\n    className: `dropdown-error ${errorClassName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, error));\n};\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/basics/Dropdown.tsx"],"names":["React","useState","useEffect","useRef","Form","BootstrapDropdown","useClickAwayListener","refs","onClickAway","active","handleClickAway","e","target","find","ref","current","contains","document","addEventListener","removeEventListener","Dropdown","label","labelClassName","error","errorClassName","initialSelected","placeholder","isInvalid","isValid","required","noFilter","inlineText","inlineTextClassName","className","options","onSelect","dropdownProps","selected","setSelected","isEmpty","setIsEmpty","isFocused","setIsFocused","filter","setFilter","filteredOptions","setFilteredOptions","dropdownRef","dropdownMenuRef","undefined","updateIsEmpty","s","filtered","option","toLowerCase","includes","value","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, MutableRefObject } from 'react';\nimport { Form } from 'react-bootstrap';\nimport BootstrapDropdown, * as BootstrapDropdownMetadata from 'react-bootstrap/Dropdown';\nimport * as z from 'zod';\n\n// TODO make this its own component/file\nconst useClickAwayListener = (\n  refs: MutableRefObject<HTMLElement | undefined | null>[],\n  onClickAway: (e: MouseEvent) => any,\n  active = true,\n) => {\n  useEffect(() => {\n    const handleClickAway = (e: MouseEvent) => {\n      if (\n        active &&\n        e.target !== null &&\n        !refs.find(\n          (ref) =>\n            ref && ref.current && ref.current.contains(e.target as Element),\n        )\n      ) {\n        onClickAway(e);\n      }\n    };\n\n    // Bind the event listener\n    document.addEventListener('click', handleClickAway);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('click', handleClickAway);\n    };\n  }, [refs, onClickAway, active]);\n};\n\ninterface DropdownProps extends BootstrapDropdownMetadata.DropdownProps {\n  options: string[];\n  initialSelected?: string; // TODO eventually make this type oneof options array\n  label?: string;\n  labelClassName?: string;\n  error?: string | z.ZodIssue; // Will make the input border red as well\n  errorClassName?: string;\n  placeholder?: string;\n  isInvalid?: boolean;\n  isValid?: boolean;\n  required?: boolean;\n  noFilter?: boolean; // Will make the user unable to filter through the options by typing in the dropdown's input\n  inlineText?: string;\n  inlineTextClassName?: string;\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({\n  label,\n  labelClassName = '',\n  error,\n  errorClassName = '',\n  initialSelected,\n  placeholder,\n  isInvalid,\n  isValid, // only provide this if you want a green checkmark. Should only be provided when multiple dropdowns are working in unison\n  required,\n  noFilter,\n  inlineText,\n  inlineTextClassName = '',\n  className = '',\n  options,\n  onSelect,\n  ...dropdownProps\n}) => {\n  const [selected, setSelected] = useState<string | undefined>(initialSelected);\n  const [isEmpty, setIsEmpty] = useState<boolean>(!selected || selected === '');\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string | undefined>();\n  const [filteredOptions, setFilteredOptions] = useState<string[]>(options);\n\n  const dropdownRef = useRef<HTMLElement>();\n  const dropdownMenuRef = useRef<HTMLDivElement>(null);\n  useClickAwayListener(\n    [dropdownRef, dropdownMenuRef],\n    () => setFilter(undefined),\n    !noFilter,\n  );\n\n  const updateIsEmpty = (s?: string | null) => {\n    if (s) setIsEmpty(!s || s === '');\n    else setIsEmpty(!selected || selected === '');\n  };\n\n  useEffect(() => {\n    const filtered = options.filter(\n      (option) => option.toLowerCase().includes(filter?.toLowerCase() || ''), // TODO for some reason filtering with a space causes issues?\n    );\n    setFilteredOptions(filtered);\n  }, [filter, options]);\n\n  return (\n    <Form.Group>\n      {(label || required) && (\n        <Form.Label className={`dropdown-label ${labelClassName}`}>\n          {label}\n          {required && <span className=\"input-required-asterisk\"> *</span>}\n        </Form.Label>\n      )}\n\n      <div className=\"d-flex\">\n        <BootstrapDropdown\n          onSelect={(s, e) => {\n            setSelected(s || undefined);\n            updateIsEmpty(s);\n            setFilter(undefined);\n\n            if (onSelect) onSelect(s, e);\n          }}\n          ref={dropdownRef}\n          className={`homehub-dropdown ${className}`}\n          {...dropdownProps}\n        >\n          <BootstrapDropdown.Toggle\n            variant=\"no-show\"\n            className=\"dropdown-toggle\"\n            onFocus={() => setIsFocused(true)}\n            onBlur={() => setIsFocused(false)}\n          >\n            <div className=\"d-flex flex-nowrap\">\n              <Form.Control\n                value={filter !== undefined ? filter : selected || ''}\n                placeholder={placeholder}\n                className={`${\n                  (isEmpty && !isFocused\n                    ? 'dropdown-unfilled '\n                    : 'dropdown-filled ') +\n                  (isInvalid || error ? 'dropdown-invalid ' : '')\n                } dropdown-straighten-right`}\n                isValid={isValid}\n                readOnly={noFilter}\n                onChange={(e) => {\n                  if (!noFilter) setFilter(e.target.value);\n                }}\n                onFocus={() => {\n                  if (!noFilter) setFilter('');\n                }}\n              />\n\n              <div\n                className={\n                  (isEmpty && !isFocused\n                    ? 'dropdown-drop-btn-unfilled '\n                    : 'dropdown-drop-btn-filled ') +\n                  (isInvalid || error ? 'dropdown-drop-btn-invalid ' : '')\n                }\n              >\n                <div className=\"dropdown-drop-btn-arrow\" />\n              </div>\n            </div>\n          </BootstrapDropdown.Toggle>\n\n          <BootstrapDropdown.Menu ref={dropdownMenuRef}>\n            {filteredOptions.map((option) => (\n              <BootstrapDropdown.Item key={option} eventKey={option}>\n                {option}\n              </BootstrapDropdown.Item>\n            ))}\n          </BootstrapDropdown.Menu>\n        </BootstrapDropdown>\n\n        {inlineText && (\n          <div className={`dropdown-inline-text ${inlineTextClassName}`}>\n            {inlineText}\n          </div>\n        )}\n      </div>\n\n      {error && (\n        <Form.Label className={`dropdown-error ${errorClassName}`}>\n          {error}\n        </Form.Label>\n      )}\n    </Form.Group>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}