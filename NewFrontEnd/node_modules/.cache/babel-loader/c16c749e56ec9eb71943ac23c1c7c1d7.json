{"ast":null,"code":"import { backendAPI } from './apiBases';\n\n/**\n * Login a user to a session.\n * @param name - the user's name\n * @param email - the user's email\n * @returns - undefined if error occured, otherwise UserLoginResponse, which includes an access token,\n *            email, message, user, imageUrl\n */\nconst userLogIn = async (name, email) => {\n  try {\n    var _response$request;\n\n    const response = await backendAPI.post('/login', JSON.stringify({\n      name,\n      email\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (((_response$request = response.request) === null || _response$request === void 0 ? void 0 : _response$request.status) !== 200) throw Error('Bad request');\n\n    if ('newUser' in response.data) {\n      // TODO find another way to do this\n      console.log('NEW USER UH HUH, IN THE API UH HUH');\n      return {\n        newUser: true\n      };\n    }\n\n    const data = {\n      name: response.data.name,\n      email: response.data.email,\n      token: response.data.access_token,\n      description: response.data.description,\n      major: response.data.major,\n      schoolYear: response.data.schoolYear,\n      phone: response.data.phone\n    };\n    return data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n}; // export interface UserLogoutResponse {\n//   // TODO\n// }\n\n/**\n * Logout a user from a session.\n * @param token - the token for the user's session.\n * @returns - undefined if error occured, string result message otherwise\n */\n\n\nconst userLogOut = async token => {\n  try {\n    var _response$request2;\n\n    const response = await backendAPI.post('/logout', // eslint-disable-next-line @typescript-eslint/camelcase\n    {\n      access_token: token\n    }, {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(response);\n    if (((_response$request2 = response.request) === null || _response$request2 === void 0 ? void 0 : _response$request2.status) !== 200) throw Error('Bad request');\n    return response.data;\n  } catch (err) {\n    console.error(`Logout error: ${err}`);\n    return undefined;\n  }\n};\n/**\n * Echo the edit of profile to backend.\n * @param kvPairs - key value pair for updates\n * @returns - undefined if error occured, otherwise UserLoginResponse, which includes an access token,\n *            email, message, user, imageUrl\n */\n\n\nconst userEditProfile = async (email, kvPairs) => {\n  try {\n    var _response$request3;\n\n    const response = await backendAPI.post('/profile', JSON.stringify({\n      email,\n      updates: kvPairs\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (((_response$request3 = response.request) === null || _response$request3 === void 0 ? void 0 : _response$request3.status) !== 201) throw Error('Bad request');\n    return response.data;\n  } catch (err) {\n    console.error(err, 'user edit profile fail');\n    return undefined;\n  }\n};\n/**\n * Create a new user.\n * @param user - the user info to create\n * @returns - undefined if error occured, otherwise UserLoginResponse, which includes an access token,\n *            email, message, user, imageUrl\n */\n\n\nconst createNewUserApi = async user => {\n  try {\n    var _response$request4;\n\n    const response = await backendAPI.post('/createUser', // TODO JSON.stringify({ name, email }),\n    user, {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (((_response$request4 = response.request) === null || _response$request4 === void 0 ? void 0 : _response$request4.status) !== 201) throw Error('Bad request');\n    return {\n      name: response.data.name,\n      email: response.data.email,\n      token: response.data.access_token,\n      description: response.data.description,\n      major: response.data.major,\n      schoolYear: response.data.schoolYear,\n      phone: response.data.phone\n    };\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport { userLogIn, userLogOut, userEditProfile, createNewUserApi };","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/apis/user.ts"],"names":["backendAPI","userLogIn","name","email","response","post","JSON","stringify","headers","withCredentials","request","status","Error","data","console","log","newUser","token","access_token","description","major","schoolYear","phone","err","error","undefined","userLogOut","userEditProfile","kvPairs","updates","createNewUserApi","user"],"mappings":"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","sourcesContent":["import { User } from '../assets/models/User';\nimport { backendAPI } from './apiBases';\n\nexport interface UserLoginResponse extends Omit<User, 'token'> {\n  access_token: string;\n  message: string;\n}\n\n/**\n * Login a user to a session.\n * @param name - the user's name\n * @param email - the user's email\n * @returns - undefined if error occured, otherwise UserLoginResponse, which includes an access token,\n *            email, message, user, imageUrl\n */\nconst userLogIn = async (name: string, email: string) => {\n  try {\n    const response = await backendAPI.post<\n      UserLoginResponse | { newUser: boolean }\n    >('/login', JSON.stringify({ name, email }), {\n      headers: {\n        'content-type': 'application/json',\n      },\n      withCredentials: true,\n    });\n\n    if (response.request?.status !== 200) throw Error('Bad request');\n\n    if ('newUser' in response.data) {\n      // TODO find another way to do this\n      console.log('NEW USER UH HUH, IN THE API UH HUH');\n      return { newUser: true };\n    }\n\n    const data: User = {\n      name: response.data.name,\n      email: response.data.email,\n      token: response.data.access_token,\n      description: response.data.description,\n      major: response.data.major,\n      schoolYear: response.data.schoolYear,\n      phone: response.data.phone,\n    };\n\n    return data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\n// export interface UserLogoutResponse {\n//   // TODO\n// }\n\n/**\n * Logout a user from a session.\n * @param token - the token for the user's session.\n * @returns - undefined if error occured, string result message otherwise\n */\nconst userLogOut = async (token: string) => {\n  try {\n    const response = await backendAPI.post<string>(\n      '/logout',\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      { access_token: token },\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(response);\n\n    if (response.request?.status !== 200) throw Error('Bad request');\n    return response.data;\n  } catch (err) {\n    console.error(`Logout error: ${err}`);\n    return undefined;\n  }\n};\n\n/**\n * Echo the edit of profile to backend.\n * @param kvPairs - key value pair for updates\n * @returns - undefined if error occured, otherwise UserLoginResponse, which includes an access token,\n *            email, message, user, imageUrl\n */\nconst userEditProfile = async (email: string, kvPairs: any) => {\n  try {\n    const response = await backendAPI.post(\n      '/profile',\n      JSON.stringify({ email, updates: kvPairs }),\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    if (response.request?.status !== 201) throw Error('Bad request');\n\n    return response.data;\n  } catch (err) {\n    console.error(err, 'user edit profile fail');\n    return undefined;\n  }\n};\n\n/**\n * Create a new user.\n * @param user - the user info to create\n * @returns - undefined if error occured, otherwise UserLoginResponse, which includes an access token,\n *            email, message, user, imageUrl\n */\nconst createNewUserApi = async (user: Omit<User, 'token'>) => {\n  try {\n    const response = await backendAPI.post<UserLoginResponse>(\n      '/createUser',\n      // TODO JSON.stringify({ name, email }),\n      user,\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n\n    if (response.request?.status !== 201) throw Error('Bad request');\n\n    return {\n      name: response.data.name,\n      email: response.data.email,\n      token: response.data.access_token,\n      description: response.data.description,\n      major: response.data.major,\n      schoolYear: response.data.schoolYear,\n      phone: response.data.phone,\n    } as User;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport { userLogIn, userLogOut, userEditProfile, createNewUserApi };\n"]},"metadata":{},"sourceType":"module"}