{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/PlacesAutoComplete.tsx\";\nimport React, { useState } from 'react';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport Input from './basics/Input';\n\nconst AutoComplete = ({\n  className = '',\n  onChange,\n  onSelect,\n  initialAddress = '',\n  ...inputProps\n}) => {\n  const [address, setAddress] = useState(initialAddress); // TODO\n  // (add) => {\n  //   dispatch(setPost(['address', add]));\n  //   getDurationInMinutes(add).then((distance: any) => {\n  //     dispatch(setPost(['distance', distance ? distance : 'unknown']));\n  //   });\n  // }\n\n  return /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: address,\n    onChange: value => {\n      setAddress(value);\n      if (onChange) onChange(value);\n    },\n    onSelect: value => {\n      // TODO this gets called even when a user doesn't select one of the dropdown suggestions\n      setAddress(value);\n      if (onSelect) onSelect(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, Object.assign({}, getInputProps({\n    placeholder: 'Search Places ...',\n    className\n  }), inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 27\n    }\n  }, \"Loading...\"), suggestions.map(suggestion =>\n  /*#__PURE__*/\n  // TODO: Missing \"key\" prop for element in iterator\n  React.createElement(\"div\", Object.assign({},\n  /* TODO fix 'Prop spreading is forbidden' */\n  getSuggestionItemProps(suggestion, {\n    className: 'suggestion-item' // style: suggestion.active\n    //   ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n    //   : { backgroundColor: '#ffffff', cursor: 'pointer' },\n\n  }), {\n    key: suggestion.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }), suggestion.description))))));\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/PlacesAutoComplete.tsx"],"names":["React","useState","PlacesAutocomplete","Input","AutoComplete","className","onChange","onSelect","initialAddress","inputProps","address","setAddress","value","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,OAAOC,KAAP,MAAkC,gBAAlC;;AAQA,MAAMC,YAAiC,GAAG,CAAC;AACzCC,EAAAA,SAAS,GAAG,EAD6B;AAEzCC,EAAAA,QAFyC;AAGzCC,EAAAA,QAHyC;AAIzCC,EAAAA,cAAc,GAAG,EAJwB;AAKzC,KAAGC;AALsC,CAAD,KAMpC;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAASO,cAAT,CAAtC,CADI,CAEJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAEE,OADT;AAEE,IAAA,QAAQ,EAAGE,KAAD,IAAW;AACnBD,MAAAA,UAAU,CAACC,KAAD,CAAV;AACA,UAAIN,QAAJ,EAAcA,QAAQ,CAACM,KAAD,CAAR;AACf,KALH;AAME,IAAA,QAAQ,EAAGA,KAAD,IAAW;AACnB;AACAD,MAAAA,UAAU,CAACC,KAAD,CAAV;AACA,UAAIL,QAAJ,EAAcA,QAAQ,CAACK,KAAD,CAAR;AACf,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYG,CAAC;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,sBAA9B;AAAsDC,IAAAA;AAAtD,GAAD,kBACC,uDAUE,oBAAC,KAAD,oBACMH,aAAa,CAAC;AAChBI,IAAAA,WAAW,EAAE,mBADG;AAEhBZ,IAAAA;AAFgB,GAAD,CADnB,EAKMI,UALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGF,WAAW,CAACI,GAAZ,CAAiBC,UAAD;AAAA;AACf;AACA;AAEI;AACGJ,EAAAA,sBAAsB,CAACI,UAAD,EAAa;AACpCd,IAAAA,SAAS,EAAE,iBADyB,CAEpC;AACA;AACA;;AAJoC,GAAb,CAH7B;AAUE,IAAA,GAAG,EAAEc,UAAU,CAACC,WAVlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYGD,UAAU,CAACC,WAZd,CAFD,CAFH,CAPF,CAVF,CAbJ,CADF;AAwDD,CAvED;;AAyEA,eAAehB,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport { Form } from 'react-bootstrap';\nimport Input, { InputProps } from './basics/Input';\n\ninterface PathProps extends Omit<InputProps, 'onChange' | 'onSelect'> {\n  onChange?: (value: string) => void;\n  onSelect?: (value: string) => void;\n  initialAddress?: string;\n}\n\nconst AutoComplete: React.FC<PathProps> = ({\n  className = '',\n  onChange,\n  onSelect,\n  initialAddress = '',\n  ...inputProps\n}) => {\n  const [address, setAddress] = useState<string>(initialAddress);\n  // TODO\n  // (add) => {\n  //   dispatch(setPost(['address', add]));\n  //   getDurationInMinutes(add).then((distance: any) => {\n  //     dispatch(setPost(['distance', distance ? distance : 'unknown']));\n  //   });\n  // }\n  return (\n    <PlacesAutocomplete\n      value={address}\n      onChange={(value) => {\n        setAddress(value);\n        if (onChange) onChange(value);\n      }}\n      onSelect={(value) => {\n        // TODO this gets called even when a user doesn't select one of the dropdown suggestions\n        setAddress(value);\n        if (onSelect) onSelect(value);\n      }}\n    >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <>\n          {/* <Form.Control\n            // TODO fix prop spread is forbidden\n            {...getInputProps({\n              placeholder: 'Search Places ...',\n              className,\n            })}\n            isValid={isValid}\n            isInvalid={isInvalid}\n          /> */}\n          <Input\n            {...getInputProps({\n              placeholder: 'Search Places ...',\n              className,\n            })}\n            {...inputProps}\n          >\n            <div>\n              {loading && <div>Loading...</div>}\n              {suggestions.map((suggestion) => (\n                // TODO: Missing \"key\" prop for element in iterator\n                <div\n                  {\n                    /* TODO fix 'Prop spreading is forbidden' */\n                    ...getSuggestionItemProps(suggestion, {\n                      className: 'suggestion-item',\n                      // style: suggestion.active\n                      //   ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                      //   : { backgroundColor: '#ffffff', cursor: 'pointer' },\n                    })\n                  }\n                  key={suggestion.description}\n                >\n                  {suggestion.description}\n                </div>\n              ))}\n            </div>\n          </Input>\n        </>\n      )}\n    </PlacesAutocomplete>\n  );\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}