{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport Cookies from 'universal-cookie';\n// TODO\nimport { userLogIn, userLogOut, userEditProfile, createNewUserApi } from '../../apis/index';\nconst cookies = new Cookies();\nconst initialState = {\n  user: cookies.get('user'),\n  userDraft: cookies.get('user'),\n  showNewUserPopup: undefined\n};\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n\n      if (action.payload) {\n        cookies.set('user', action.payload, {\n          // TODO should probably set this from the backend as well (similar to access_token)\n          maxAge: 4320 // expires  72 hours after login\n\n        });\n      } else {\n        cookies.remove('user');\n      }\n    },\n    setUserDraft: (state, action) => {\n      state.userDraft = action.payload;\n\n      if (action.payload) {\n        cookies.set('userDraft', action.payload, {\n          // TODO should probably set this from the backend as well (similar to access_token)\n          maxAge: 4320 // expires  72 hours after login\n\n        });\n      } else {\n        cookies.remove('userDraft');\n      }\n    },\n    startNewUserFlow: (state, action) => {\n      state.showNewUserPopup = action.payload;\n    },\n    endNewUserFlow: state => {\n      state.showNewUserPopup = undefined;\n    }\n  }\n}); // Export actions that were defined with createSlice\n\nexport const {\n  setUser,\n  setUserDraft,\n  startNewUserFlow,\n  endNewUserFlow\n} = authSlice.actions; // Thunks here\n\nexport const login = (name, email) => async (dispatch) => {\n  const response = await userLogIn(name, email);\n\n  if (response) {\n    if ('newUser' in response) {\n      console.log('HERE');\n      console.log(response);\n      dispatch(startNewUserFlow({\n        name,\n        email\n      }));\n    } else {\n      dispatch(setUser({\n        name: response.name,\n        email: response.email,\n        token: response.token,\n        description: response.description,\n        major: response.major,\n        schoolYear: response.schoolYear,\n        phone: response.phone\n      }));\n      dispatch(setUserDraft({\n        name: response.name,\n        email: response.email,\n        token: response.token,\n        description: response.description,\n        major: response.major,\n        schoolYear: response.schoolYear,\n        phone: response.phone\n      }));\n    }\n  }\n}; // TODO this doesn't seem to be able to handle when the cookie times out\n\nexport const logout = () => async (dispatch, getState) => {\n  var _getState$auth$user;\n\n  // remove cookies here, which will automatically update the user\n  const token = (_getState$auth$user = getState().auth.user) === null || _getState$auth$user === void 0 ? void 0 : _getState$auth$user.token;\n  if (!token) return; // TODO doesn't work well anymore. I think it's cause we changed the backend\n\n  const response = await userLogOut(token);\n\n  if (response) {\n    dispatch(setUser(undefined));\n    dispatch(setUserDraft(undefined)); // TODO not sure if this is needed\n  }\n};\nexport const createNewUser = user => async (dispatch, getState) => {\n  console.log('creating new user'); // TODO const token = getState().auth.user?.token;\n  // if (!token) return;\n  // console.log('token exists');\n\n  const response = await createNewUserApi(user); // TODO , token\n\n  console.log('response');\n  console.log(response);\n\n  if (response) {\n    dispatch(setUser(response));\n    dispatch(endNewUserFlow());\n  }\n};\nexport const editProfile = (email, userDraft, kvPairs, onSucess) => async dispatch => {\n  const response = await userEditProfile(email, kvPairs);\n\n  if (response) {\n    onSucess(true);\n    dispatch(setUser(userDraft));\n  }\n}; // Selects here\n\nconst selectUser = state => state.auth.user;\n\nconst selectUserDraft = state => state.auth.userDraft;\n\nconst selectShowNewUserPopup = state => state.auth.showNewUserPopup;\n\nexport { selectUser, selectUserDraft, selectShowNewUserPopup }; // Export everything\n\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/redux/slices/auth.ts"],"names":["createSlice","Cookies","userLogIn","userLogOut","userEditProfile","createNewUserApi","cookies","initialState","user","get","userDraft","showNewUserPopup","undefined","authSlice","name","reducers","setUser","state","action","payload","set","maxAge","remove","setUserDraft","startNewUserFlow","endNewUserFlow","actions","login","email","dispatch","response","console","log","token","description","major","schoolYear","phone","logout","getState","auth","createNewUser","editProfile","kvPairs","onSucess","selectUser","selectUserDraft","selectShowNewUserPopup","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport Cookies from 'universal-cookie';\nimport { AppThunk, RootState } from '../store'; // TODO\nimport {\n  userLogIn,\n  userLogOut,\n  userEditProfile,\n  createNewUserApi,\n} from '../../apis/index';\nimport { User, UserNameEmail } from '../../assets/models/User';\n\nconst cookies = new Cookies();\n\ninterface AuthState {\n  user?: User;\n  userDraft?: User; // TODO change this to not be stored in redux and cookies\n  showNewUserPopup?: UserNameEmail;\n}\n\nconst initialState: AuthState = {\n  user: cookies.get<User>('user'),\n  userDraft: cookies.get<User>('user'),\n  showNewUserPopup: undefined,\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action: PayloadAction<User | undefined>) => {\n      state.user = action.payload;\n      if (action.payload) {\n        cookies.set('user', action.payload, {\n          // TODO should probably set this from the backend as well (similar to access_token)\n          maxAge: 4320, // expires  72 hours after login\n        });\n      } else {\n        cookies.remove('user');\n      }\n    },\n    setUserDraft: (state, action: PayloadAction<User | undefined>) => {\n      state.userDraft = action.payload;\n      if (action.payload) {\n        cookies.set('userDraft', action.payload, {\n          // TODO should probably set this from the backend as well (similar to access_token)\n          maxAge: 4320, // expires  72 hours after login\n        });\n      } else {\n        cookies.remove('userDraft');\n      }\n    },\n    startNewUserFlow: (\n      state,\n      action: PayloadAction<UserNameEmail | undefined>,\n    ) => {\n      state.showNewUserPopup = action.payload;\n    },\n    endNewUserFlow: (state) => {\n      state.showNewUserPopup = undefined;\n    },\n  },\n});\n\n// Export actions that were defined with createSlice\nexport const {\n  setUser,\n  setUserDraft,\n  startNewUserFlow,\n  endNewUserFlow,\n} = authSlice.actions;\n\n// Thunks here\nexport const login = (name: string, email: string): AppThunk => async (\n  dispatch,\n) => {\n  const response = await userLogIn(name, email);\n  if (response) {\n    if ('newUser' in response) {\n      console.log('HERE');\n      console.log(response);\n      dispatch(startNewUserFlow({ name, email }));\n    } else {\n      dispatch(\n        setUser({\n          name: response.name,\n          email: response.email,\n          token: response.token,\n          description: response.description,\n          major: response.major,\n          schoolYear: response.schoolYear,\n          phone: response.phone,\n        }),\n      );\n      dispatch(\n        setUserDraft({\n          name: response.name,\n          email: response.email,\n          token: response.token,\n          description: response.description,\n          major: response.major,\n          schoolYear: response.schoolYear,\n          phone: response.phone,\n        }),\n      );\n    }\n  }\n};\n\n// TODO this doesn't seem to be able to handle when the cookie times out\nexport const logout = (): AppThunk => async (dispatch, getState) => {\n  // remove cookies here, which will automatically update the user\n  const token = getState().auth.user?.token;\n  if (!token) return; // TODO doesn't work well anymore. I think it's cause we changed the backend\n\n  const response = await userLogOut(token);\n  if (response) {\n    dispatch(setUser(undefined));\n    dispatch(setUserDraft(undefined)); // TODO not sure if this is needed\n  }\n};\n\nexport const createNewUser = (user: Omit<User, 'token'>): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  console.log('creating new user');\n  // TODO const token = getState().auth.user?.token;\n  // if (!token) return;\n  // console.log('token exists');\n\n  const response = await createNewUserApi(user); // TODO , token\n  console.log('response');\n  console.log(response);\n\n  if (response) {\n    dispatch(setUser(response));\n    dispatch(endNewUserFlow());\n  }\n};\n\nexport const editProfile = (\n  email: string,\n  userDraft: User,\n  kvPairs: any,\n  onSucess: Function,\n): AppThunk => async (dispatch) => {\n  const response = await userEditProfile(email, kvPairs);\n  if (response) {\n    onSucess(true);\n    dispatch(setUser(userDraft));\n  }\n};\n\n// Selects here\nconst selectUser = (state: RootState) => state.auth.user;\nconst selectUserDraft = (state: RootState) => state.auth.userDraft;\nconst selectShowNewUserPopup = (state: RootState) =>\n  state.auth.showNewUserPopup;\nexport { selectUser, selectUserDraft, selectShowNewUserPopup };\n\n// Export everything\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}