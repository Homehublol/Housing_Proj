{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ZodCodeGenerator = void 0;\n\nvar util_1 = require(\"./helpers/util\");\n\nvar _1 = require(\".\");\n\nvar isOptional = function (schema) {\n  return schema.isOptional();\n};\n\nvar ZodCodeGenerator = function () {\n  function ZodCodeGenerator() {\n    var _this = this;\n\n    this.seen = [];\n    this.serial = 0;\n\n    this.randomId = function () {\n      return \"IZod\" + _this.serial++;\n    };\n\n    this.findBySchema = function (schema) {\n      return _this.seen.find(function (s) {\n        return s.schema === schema;\n      });\n    };\n\n    this.findById = function (id) {\n      var found = _this.seen.find(function (s) {\n        return s.id === id;\n      });\n\n      if (!found) throw new Error(\"Unfound ID: \" + id);\n      return found;\n    };\n\n    this.dump = function () {\n      return \"\\ntype Identity<T> = T;\\n\\n\" + _this.seen.map(function (item) {\n        return \"type \" + item.id + \" = Identity<\" + item.type + \">;\";\n      }).join(\"\\n\\n\") + \"\\n\";\n    };\n\n    this.setType = function (id, type) {\n      var found = _this.findById(id);\n\n      found.type = type;\n      return found;\n    };\n\n    this.generate = function (schema) {\n      var e_1, _a, e_2, _b;\n\n      var found = _this.findBySchema(schema);\n\n      if (found) return found;\n      var def = schema._def;\n\n      var id = _this.randomId();\n\n      var ty = {\n        schema: schema,\n        id: id,\n        type: \"__INCOMPLETE__\"\n      };\n\n      _this.seen.push(ty);\n\n      switch (def.t) {\n        case _1.ZodTypes.string:\n          return _this.setType(id, \"string\");\n\n        case _1.ZodTypes.number:\n          return _this.setType(id, \"number\");\n\n        case _1.ZodTypes.bigint:\n          return _this.setType(id, \"bigint\");\n\n        case _1.ZodTypes.boolean:\n          return _this.setType(id, \"boolean\");\n\n        case _1.ZodTypes.date:\n          return _this.setType(id, \"Date\");\n\n        case _1.ZodTypes.undefined:\n          return _this.setType(id, \"undefined\");\n\n        case _1.ZodTypes.null:\n          return _this.setType(id, \"null\");\n\n        case _1.ZodTypes.any:\n          return _this.setType(id, \"any\");\n\n        case _1.ZodTypes.unknown:\n          return _this.setType(id, \"unknown\");\n\n        case _1.ZodTypes.never:\n          return _this.setType(id, \"never\");\n\n        case _1.ZodTypes.void:\n          return _this.setType(id, \"void\");\n\n        case _1.ZodTypes.literal:\n          var val = def.value;\n          var literalType = typeof val === \"string\" ? \"\\\"\" + val + \"\\\"\" : \"\" + val;\n          return _this.setType(id, literalType);\n\n        case _1.ZodTypes.enum:\n          return _this.setType(id, def.values.map(function (v) {\n            return \"\\\"\" + v + \"\\\"\";\n          }).join(\" | \"));\n\n        case _1.ZodTypes.object:\n          var objectLines = [];\n          var shape = def.shape();\n\n          for (var key in shape) {\n            var childSchema = shape[key];\n\n            var childType = _this.generate(childSchema);\n\n            var OPTKEY = isOptional(childSchema) ? \"?\" : \"\";\n            objectLines.push(\"\" + key + OPTKEY + \": \" + childType.id);\n          }\n\n          var baseStruct = \"{\\n\" + objectLines.map(function (line) {\n            return \"  \" + line + \";\";\n          }).join(\"\\n\") + \"\\n}\";\n\n          _this.setType(id, \"\" + baseStruct);\n\n          break;\n\n        case _1.ZodTypes.tuple:\n          var tupleLines = [];\n\n          try {\n            for (var _c = __values(def.items), _d = _c.next(); !_d.done; _d = _c.next()) {\n              var elSchema = _d.value;\n\n              var elType = _this.generate(elSchema);\n\n              tupleLines.push(elType.id);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          var baseTuple = \"[\\n\" + tupleLines.map(function (line) {\n            return \"  \" + line + \",\";\n          }).join(\"\\n\") + \"\\n]\";\n          return _this.setType(id, \"\" + baseTuple);\n\n        case _1.ZodTypes.array:\n          return _this.setType(id, _this.generate(def.type).id + \"[]\");\n\n        case _1.ZodTypes.function:\n          var args = _this.generate(def.args);\n\n          var returns = _this.generate(def.returns);\n\n          return _this.setType(id, \"(...args: \" + args.id + \")=>\" + returns.id);\n\n        case _1.ZodTypes.promise:\n          var promValue = _this.generate(def.type);\n\n          return _this.setType(id, \"Promise<\" + promValue.id + \">\");\n\n        case _1.ZodTypes.union:\n          var unionLines = [];\n\n          try {\n            for (var _e = __values(def.options), _f = _e.next(); !_f.done; _f = _e.next()) {\n              var elSchema = _f.value;\n\n              var elType = _this.generate(elSchema);\n\n              unionLines.push(elType.id);\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n\n          return _this.setType(id, unionLines.join(\" | \"));\n\n        case _1.ZodTypes.intersection:\n          return _this.setType(id, _this.generate(def.left).id + \" & \" + _this.generate(def.right).id);\n\n        case _1.ZodTypes.record:\n          return _this.setType(id, \"{[k:string]: \" + _this.generate(def.valueType).id + \"}\");\n\n        case _1.ZodTypes.transformer:\n          return _this.setType(id, _this.generate(def.output).id);\n\n        case _1.ZodTypes.map:\n          return _this.setType(id, \"Map<\" + _this.generate(def.keyType).id + \", \" + _this.generate(def.valueType).id + \">\");\n\n        case _1.ZodTypes.lazy:\n          var lazyType = def.getter();\n          return _this.setType(id, _this.generate(lazyType).id);\n\n        case _1.ZodTypes.nativeEnum:\n          return _this.setType(id, \"asdf\");\n\n        case _1.ZodTypes.optional:\n          return _this.setType(id, _this.generate(def.innerType).id + \" | undefined\");\n\n        case _1.ZodTypes.nullable:\n          return _this.setType(id, _this.generate(def.innerType).id + \" | null\");\n\n        default:\n          util_1.util.assertNever(def);\n      }\n\n      return _this.findById(id);\n    };\n  }\n\n  ZodCodeGenerator.create = function () {\n    return new ZodCodeGenerator();\n  };\n\n  return ZodCodeGenerator;\n}();\n\nexports.ZodCodeGenerator = ZodCodeGenerator;","map":{"version":3,"sources":["../../src/codegen.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ZodCodeGenerator = void 0;\nvar util_1 = require(\"./helpers/util\");\nvar _1 = require(\".\");\nvar isOptional = function (schema) {\n    return schema.isOptional();\n};\nvar ZodCodeGenerator = (function () {\n    function ZodCodeGenerator() {\n        var _this = this;\n        this.seen = [];\n        this.serial = 0;\n        this.randomId = function () {\n            return \"IZod\" + _this.serial++;\n        };\n        this.findBySchema = function (schema) {\n            return _this.seen.find(function (s) { return s.schema === schema; });\n        };\n        this.findById = function (id) {\n            var found = _this.seen.find(function (s) { return s.id === id; });\n            if (!found)\n                throw new Error(\"Unfound ID: \" + id);\n            return found;\n        };\n        this.dump = function () {\n            return \"\\ntype Identity<T> = T;\\n\\n\" + _this.seen\n                .map(function (item) { return \"type \" + item.id + \" = Identity<\" + item.type + \">;\"; })\n                .join(\"\\n\\n\") + \"\\n\";\n        };\n        this.setType = function (id, type) {\n            var found = _this.findById(id);\n            found.type = type;\n            return found;\n        };\n        this.generate = function (schema) {\n            var e_1, _a, e_2, _b;\n            var found = _this.findBySchema(schema);\n            if (found)\n                return found;\n            var def = schema._def;\n            var id = _this.randomId();\n            var ty = {\n                schema: schema,\n                id: id,\n                type: \"__INCOMPLETE__\",\n            };\n            _this.seen.push(ty);\n            switch (def.t) {\n                case _1.ZodTypes.string:\n                    return _this.setType(id, \"string\");\n                case _1.ZodTypes.number:\n                    return _this.setType(id, \"number\");\n                case _1.ZodTypes.bigint:\n                    return _this.setType(id, \"bigint\");\n                case _1.ZodTypes.boolean:\n                    return _this.setType(id, \"boolean\");\n                case _1.ZodTypes.date:\n                    return _this.setType(id, \"Date\");\n                case _1.ZodTypes.undefined:\n                    return _this.setType(id, \"undefined\");\n                case _1.ZodTypes.null:\n                    return _this.setType(id, \"null\");\n                case _1.ZodTypes.any:\n                    return _this.setType(id, \"any\");\n                case _1.ZodTypes.unknown:\n                    return _this.setType(id, \"unknown\");\n                case _1.ZodTypes.never:\n                    return _this.setType(id, \"never\");\n                case _1.ZodTypes.void:\n                    return _this.setType(id, \"void\");\n                case _1.ZodTypes.literal:\n                    var val = def.value;\n                    var literalType = typeof val === \"string\" ? \"\\\"\" + val + \"\\\"\" : \"\" + val;\n                    return _this.setType(id, literalType);\n                case _1.ZodTypes.enum:\n                    return _this.setType(id, def.values.map(function (v) { return \"\\\"\" + v + \"\\\"\"; }).join(\" | \"));\n                case _1.ZodTypes.object:\n                    var objectLines = [];\n                    var shape = def.shape();\n                    for (var key in shape) {\n                        var childSchema = shape[key];\n                        var childType = _this.generate(childSchema);\n                        var OPTKEY = isOptional(childSchema) ? \"?\" : \"\";\n                        objectLines.push(\"\" + key + OPTKEY + \": \" + childType.id);\n                    }\n                    var baseStruct = \"{\\n\" + objectLines\n                        .map(function (line) { return \"  \" + line + \";\"; })\n                        .join(\"\\n\") + \"\\n}\";\n                    _this.setType(id, \"\" + baseStruct);\n                    break;\n                case _1.ZodTypes.tuple:\n                    var tupleLines = [];\n                    try {\n                        for (var _c = __values(def.items), _d = _c.next(); !_d.done; _d = _c.next()) {\n                            var elSchema = _d.value;\n                            var elType = _this.generate(elSchema);\n                            tupleLines.push(elType.id);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    var baseTuple = \"[\\n\" + tupleLines\n                        .map(function (line) { return \"  \" + line + \",\"; })\n                        .join(\"\\n\") + \"\\n]\";\n                    return _this.setType(id, \"\" + baseTuple);\n                case _1.ZodTypes.array:\n                    return _this.setType(id, _this.generate(def.type).id + \"[]\");\n                case _1.ZodTypes.function:\n                    var args = _this.generate(def.args);\n                    var returns = _this.generate(def.returns);\n                    return _this.setType(id, \"(...args: \" + args.id + \")=>\" + returns.id);\n                case _1.ZodTypes.promise:\n                    var promValue = _this.generate(def.type);\n                    return _this.setType(id, \"Promise<\" + promValue.id + \">\");\n                case _1.ZodTypes.union:\n                    var unionLines = [];\n                    try {\n                        for (var _e = __values(def.options), _f = _e.next(); !_f.done; _f = _e.next()) {\n                            var elSchema = _f.value;\n                            var elType = _this.generate(elSchema);\n                            unionLines.push(elType.id);\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                    return _this.setType(id, unionLines.join(\" | \"));\n                case _1.ZodTypes.intersection:\n                    return _this.setType(id, _this.generate(def.left).id + \" & \" + _this.generate(def.right).id);\n                case _1.ZodTypes.record:\n                    return _this.setType(id, \"{[k:string]: \" + _this.generate(def.valueType).id + \"}\");\n                case _1.ZodTypes.transformer:\n                    return _this.setType(id, _this.generate(def.output).id);\n                case _1.ZodTypes.map:\n                    return _this.setType(id, \"Map<\" + _this.generate(def.keyType).id + \", \" + _this.generate(def.valueType).id + \">\");\n                case _1.ZodTypes.lazy:\n                    var lazyType = def.getter();\n                    return _this.setType(id, _this.generate(lazyType).id);\n                case _1.ZodTypes.nativeEnum:\n                    return _this.setType(id, \"asdf\");\n                case _1.ZodTypes.optional:\n                    return _this.setType(id, _this.generate(def.innerType).id + \" | undefined\");\n                case _1.ZodTypes.nullable:\n                    return _this.setType(id, _this.generate(def.innerType).id + \" | null\");\n                default:\n                    util_1.util.assertNever(def);\n            }\n            return _this.findById(id);\n        };\n    }\n    ZodCodeGenerator.create = function () { return new ZodCodeGenerator(); };\n    return ZodCodeGenerator;\n}());\nexports.ZodCodeGenerator = ZodCodeGenerator;\n//# sourceMappingURL=codegen.js.map"]},"metadata":{},"sourceType":"script"}