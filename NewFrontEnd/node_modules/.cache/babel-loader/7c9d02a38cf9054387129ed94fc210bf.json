{"ast":null,"code":"\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar string_1 = require(\"./types/string\");\n\nexports.ZodString = string_1.ZodString;\n\nvar number_1 = require(\"./types/number\");\n\nexports.ZodNumber = number_1.ZodNumber;\n\nvar bigint_1 = require(\"./types/bigint\");\n\nexports.ZodBigInt = bigint_1.ZodBigInt;\n\nvar boolean_1 = require(\"./types/boolean\");\n\nexports.ZodBoolean = boolean_1.ZodBoolean;\n\nvar date_1 = require(\"./types/date\");\n\nexports.ZodDate = date_1.ZodDate;\n\nvar undefined_1 = require(\"./types/undefined\");\n\nexports.ZodUndefined = undefined_1.ZodUndefined;\n\nvar null_1 = require(\"./types/null\");\n\nexports.ZodNull = null_1.ZodNull;\n\nvar any_1 = require(\"./types/any\");\n\nexports.ZodAny = any_1.ZodAny;\n\nvar unknown_1 = require(\"./types/unknown\");\n\nexports.ZodUnknown = unknown_1.ZodUnknown;\n\nvar never_1 = require(\"./types/never\");\n\nexports.ZodNever = never_1.ZodNever;\n\nvar void_1 = require(\"./types/void\");\n\nexports.ZodVoid = void_1.ZodVoid;\n\nvar array_1 = require(\"./types/array\");\n\nexports.ZodArray = array_1.ZodArray;\n\nvar object_1 = require(\"./types/object\");\n\nexports.ZodObject = object_1.ZodObject;\n\nvar union_1 = require(\"./types/union\");\n\nexports.ZodUnion = union_1.ZodUnion;\n\nvar intersection_1 = require(\"./types/intersection\");\n\nexports.ZodIntersection = intersection_1.ZodIntersection;\n\nvar tuple_1 = require(\"./types/tuple\");\n\nexports.ZodTuple = tuple_1.ZodTuple;\n\nvar record_1 = require(\"./types/record\");\n\nexports.ZodRecord = record_1.ZodRecord;\n\nvar map_1 = require(\"./types/map\");\n\nvar function_1 = require(\"./types/function\");\n\nexports.ZodFunction = function_1.ZodFunction;\n\nvar lazy_1 = require(\"./types/lazy\");\n\nexports.ZodLazy = lazy_1.ZodLazy;\n\nvar literal_1 = require(\"./types/literal\");\n\nexports.ZodLiteral = literal_1.ZodLiteral;\n\nvar enum_1 = require(\"./types/enum\");\n\nexports.ZodEnum = enum_1.ZodEnum;\n\nvar nativeEnum_1 = require(\"./types/nativeEnum\");\n\nexports.ZodNativeEnum = nativeEnum_1.ZodNativeEnum;\n\nvar promise_1 = require(\"./types/promise\");\n\nexports.ZodPromise = promise_1.ZodPromise;\n\nvar transformer_1 = require(\"./types/transformer\");\n\nexports.ZodTransformer = transformer_1.ZodTransformer;\n\nvar optional_1 = require(\"./types/optional\");\n\nexports.ZodOptional = optional_1.ZodOptional;\n\nvar nullable_1 = require(\"./types/nullable\");\n\nexports.ZodNullable = nullable_1.ZodNullable;\n\nvar base_1 = require(\"./types/base\");\n\nexports.ZodType = base_1.ZodType;\nexports.Schema = base_1.ZodType;\nexports.ZodSchema = base_1.ZodType;\nexports.ZodTypes = base_1.ZodTypes;\n\nvar parser_1 = require(\"./parser\");\n\nexports.ZodParsedType = parser_1.ZodParsedType;\n\nvar codegen_1 = require(\"./codegen\");\n\nexports.ZodCodeGenerator = codegen_1.ZodCodeGenerator;\nvar stringType = string_1.ZodString.create;\nexports.string = stringType;\nvar numberType = number_1.ZodNumber.create;\nexports.number = numberType;\nvar bigIntType = bigint_1.ZodBigInt.create;\nexports.bigint = bigIntType;\nvar booleanType = boolean_1.ZodBoolean.create;\nexports.boolean = booleanType;\nvar dateType = date_1.ZodDate.create;\nexports.date = dateType;\nvar undefinedType = undefined_1.ZodUndefined.create;\nexports.undefined = undefinedType;\nvar nullType = null_1.ZodNull.create;\nexports.null = nullType;\nvar anyType = any_1.ZodAny.create;\nexports.any = anyType;\nvar unknownType = unknown_1.ZodUnknown.create;\nexports.unknown = unknownType;\nvar neverType = never_1.ZodNever.create;\nexports.never = neverType;\nvar voidType = void_1.ZodVoid.create;\nexports.void = voidType;\nvar arrayType = array_1.ZodArray.create;\nexports.array = arrayType;\nvar objectType = object_1.ZodObject.create;\nexports.object = objectType;\nvar unionType = union_1.ZodUnion.create;\nexports.union = unionType;\nvar intersectionType = intersection_1.ZodIntersection.create;\nexports.intersection = intersectionType;\nvar tupleType = tuple_1.ZodTuple.create;\nexports.tuple = tupleType;\nvar recordType = record_1.ZodRecord.create;\nexports.record = recordType;\nvar mapType = map_1.ZodMap.create;\nexports.map = mapType;\nvar functionType = function_1.ZodFunction.create;\nexports.function = functionType;\nvar lazyType = lazy_1.ZodLazy.create;\nexports.lazy = lazyType;\nvar literalType = literal_1.ZodLiteral.create;\nexports.literal = literalType;\nvar enumType = enum_1.ZodEnum.create;\nexports.enum = enumType;\nvar nativeEnumType = nativeEnum_1.ZodNativeEnum.create;\nexports.nativeEnum = nativeEnumType;\nvar promiseType = promise_1.ZodPromise.create;\nexports.promise = promiseType;\nvar transformerType = transformer_1.ZodTransformer.create;\nexports.transformer = transformerType;\nvar optionalType = optional_1.ZodOptional.create;\nexports.optional = optionalType;\nvar nullableType = nullable_1.ZodNullable.create;\nexports.nullable = nullableType;\n\nvar ostring = function () {\n  return stringType().optional();\n};\n\nexports.ostring = ostring;\n\nvar onumber = function () {\n  return numberType().optional();\n};\n\nexports.onumber = onumber;\n\nvar oboolean = function () {\n  return booleanType().optional();\n};\n\nexports.oboolean = oboolean;\nvar codegen = codegen_1.ZodCodeGenerator.create;\nexports.codegen = codegen;\n\nexports.custom = function (check, params) {\n  if (check) return anyType().refine(check, params);\n  return anyType();\n};\n\nvar instanceOfType = function (cls, params) {\n  if (params === void 0) {\n    params = {\n      message: \"Input not instance of \" + cls.name\n    };\n  }\n\n  return exports.custom(function (data) {\n    return data instanceof cls;\n  }, params);\n};\n\nexports.instanceof = instanceOfType;\nexports.late = {\n  object: object_1.ZodObject.lazycreate\n};\n\n__export(require(\"./ZodError\"));","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar string_1 = require(\"./types/string\");\nexports.ZodString = string_1.ZodString;\nvar number_1 = require(\"./types/number\");\nexports.ZodNumber = number_1.ZodNumber;\nvar bigint_1 = require(\"./types/bigint\");\nexports.ZodBigInt = bigint_1.ZodBigInt;\nvar boolean_1 = require(\"./types/boolean\");\nexports.ZodBoolean = boolean_1.ZodBoolean;\nvar date_1 = require(\"./types/date\");\nexports.ZodDate = date_1.ZodDate;\nvar undefined_1 = require(\"./types/undefined\");\nexports.ZodUndefined = undefined_1.ZodUndefined;\nvar null_1 = require(\"./types/null\");\nexports.ZodNull = null_1.ZodNull;\nvar any_1 = require(\"./types/any\");\nexports.ZodAny = any_1.ZodAny;\nvar unknown_1 = require(\"./types/unknown\");\nexports.ZodUnknown = unknown_1.ZodUnknown;\nvar never_1 = require(\"./types/never\");\nexports.ZodNever = never_1.ZodNever;\nvar void_1 = require(\"./types/void\");\nexports.ZodVoid = void_1.ZodVoid;\nvar array_1 = require(\"./types/array\");\nexports.ZodArray = array_1.ZodArray;\nvar object_1 = require(\"./types/object\");\nexports.ZodObject = object_1.ZodObject;\nvar union_1 = require(\"./types/union\");\nexports.ZodUnion = union_1.ZodUnion;\nvar intersection_1 = require(\"./types/intersection\");\nexports.ZodIntersection = intersection_1.ZodIntersection;\nvar tuple_1 = require(\"./types/tuple\");\nexports.ZodTuple = tuple_1.ZodTuple;\nvar record_1 = require(\"./types/record\");\nexports.ZodRecord = record_1.ZodRecord;\nvar map_1 = require(\"./types/map\");\nvar function_1 = require(\"./types/function\");\nexports.ZodFunction = function_1.ZodFunction;\nvar lazy_1 = require(\"./types/lazy\");\nexports.ZodLazy = lazy_1.ZodLazy;\nvar literal_1 = require(\"./types/literal\");\nexports.ZodLiteral = literal_1.ZodLiteral;\nvar enum_1 = require(\"./types/enum\");\nexports.ZodEnum = enum_1.ZodEnum;\nvar nativeEnum_1 = require(\"./types/nativeEnum\");\nexports.ZodNativeEnum = nativeEnum_1.ZodNativeEnum;\nvar promise_1 = require(\"./types/promise\");\nexports.ZodPromise = promise_1.ZodPromise;\nvar transformer_1 = require(\"./types/transformer\");\nexports.ZodTransformer = transformer_1.ZodTransformer;\nvar optional_1 = require(\"./types/optional\");\nexports.ZodOptional = optional_1.ZodOptional;\nvar nullable_1 = require(\"./types/nullable\");\nexports.ZodNullable = nullable_1.ZodNullable;\nvar base_1 = require(\"./types/base\");\nexports.ZodType = base_1.ZodType;\nexports.Schema = base_1.ZodType;\nexports.ZodSchema = base_1.ZodType;\nexports.ZodTypes = base_1.ZodTypes;\nvar parser_1 = require(\"./parser\");\nexports.ZodParsedType = parser_1.ZodParsedType;\nvar codegen_1 = require(\"./codegen\");\nexports.ZodCodeGenerator = codegen_1.ZodCodeGenerator;\nvar stringType = string_1.ZodString.create;\nexports.string = stringType;\nvar numberType = number_1.ZodNumber.create;\nexports.number = numberType;\nvar bigIntType = bigint_1.ZodBigInt.create;\nexports.bigint = bigIntType;\nvar booleanType = boolean_1.ZodBoolean.create;\nexports.boolean = booleanType;\nvar dateType = date_1.ZodDate.create;\nexports.date = dateType;\nvar undefinedType = undefined_1.ZodUndefined.create;\nexports.undefined = undefinedType;\nvar nullType = null_1.ZodNull.create;\nexports.null = nullType;\nvar anyType = any_1.ZodAny.create;\nexports.any = anyType;\nvar unknownType = unknown_1.ZodUnknown.create;\nexports.unknown = unknownType;\nvar neverType = never_1.ZodNever.create;\nexports.never = neverType;\nvar voidType = void_1.ZodVoid.create;\nexports.void = voidType;\nvar arrayType = array_1.ZodArray.create;\nexports.array = arrayType;\nvar objectType = object_1.ZodObject.create;\nexports.object = objectType;\nvar unionType = union_1.ZodUnion.create;\nexports.union = unionType;\nvar intersectionType = intersection_1.ZodIntersection.create;\nexports.intersection = intersectionType;\nvar tupleType = tuple_1.ZodTuple.create;\nexports.tuple = tupleType;\nvar recordType = record_1.ZodRecord.create;\nexports.record = recordType;\nvar mapType = map_1.ZodMap.create;\nexports.map = mapType;\nvar functionType = function_1.ZodFunction.create;\nexports.function = functionType;\nvar lazyType = lazy_1.ZodLazy.create;\nexports.lazy = lazyType;\nvar literalType = literal_1.ZodLiteral.create;\nexports.literal = literalType;\nvar enumType = enum_1.ZodEnum.create;\nexports.enum = enumType;\nvar nativeEnumType = nativeEnum_1.ZodNativeEnum.create;\nexports.nativeEnum = nativeEnumType;\nvar promiseType = promise_1.ZodPromise.create;\nexports.promise = promiseType;\nvar transformerType = transformer_1.ZodTransformer.create;\nexports.transformer = transformerType;\nvar optionalType = optional_1.ZodOptional.create;\nexports.optional = optionalType;\nvar nullableType = nullable_1.ZodNullable.create;\nexports.nullable = nullableType;\nvar ostring = function () { return stringType().optional(); };\nexports.ostring = ostring;\nvar onumber = function () { return numberType().optional(); };\nexports.onumber = onumber;\nvar oboolean = function () { return booleanType().optional(); };\nexports.oboolean = oboolean;\nvar codegen = codegen_1.ZodCodeGenerator.create;\nexports.codegen = codegen;\nexports.custom = function (check, params) {\n    if (check)\n        return anyType().refine(check, params);\n    return anyType();\n};\nvar instanceOfType = function (cls, params) {\n    if (params === void 0) { params = {\n        message: \"Input not instance of \" + cls.name,\n    }; }\n    return exports.custom(function (data) { return data instanceof cls; }, params);\n};\nexports.instanceof = instanceOfType;\nexports.late = {\n    object: object_1.ZodObject.lazycreate,\n};\n__export(require(\"./ZodError\"));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}