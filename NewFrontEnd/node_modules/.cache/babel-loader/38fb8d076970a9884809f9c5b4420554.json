{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport Cookies from 'universal-cookie';\n// TODO\nimport { userLogIn, userLogOut } from '../../apis/index';\nconst cookies = new Cookies();\nconst initialState = {\n  user: cookies.get('user') // TODO temp for fake logged in user: {\n  //   name: 'Amit Bar',\n  //   email: \"'noneofyobusiness@gmail.com\",\n  //   imageUrl: 'image',\n  //   token: 'fake',\n  // },\n\n};\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n\n      if (action.payload) {\n        cookies.set('user', action.payload, {\n          // TODO should probably set this from the backend as well (similar to access_token)\n          maxAge: 4320 // expires  72 hours after login\n\n        });\n      } else {\n        cookies.remove('user');\n      }\n    }\n  }\n}); // Export actions that were defined with createSlice\n\nexport const {\n  setUser\n} = authSlice.actions; // Thunks here\n\nexport const login = (name, email) => async (dispatch) => {\n  const response = await userLogIn(name, email);\n\n  if (response) {\n    dispatch(setUser({\n      name: response.name,\n      email: response.email,\n      token: response.token,\n      description: response.description,\n      major: response.major,\n      schoolYear: response.schoolYear,\n      phone: response.phone\n    }));\n  }\n}; // TODO this doesn't seem to be able to handle when the cookie times out\n\nexport const logout = () => async (dispatch, getState) => {\n  var _getState$auth$user;\n\n  // remove cookies here, which will automatically update the user\n  const token = (_getState$auth$user = getState().auth.user) === null || _getState$auth$user === void 0 ? void 0 : _getState$auth$user.token;\n  if (!token) return; // TODO doesn't work well anymore. I think it's cause we changed the backend\n\n  const response = await userLogOut(token);\n\n  if (response) {\n    dispatch(setUser(undefined)); // TODO not sure if this is needed\n  }\n}; // Selects here\n\nconst selectUser = state => state.auth.user;\n\nexport { selectUser }; // Export everything\n\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/redux/slices/auth.ts"],"names":["createSlice","Cookies","userLogIn","userLogOut","cookies","initialState","user","get","authSlice","name","reducers","setUser","state","action","payload","set","maxAge","remove","actions","login","email","dispatch","response","token","description","major","schoolYear","phone","logout","getState","auth","undefined","selectUser","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACgD;AAChD,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AAGA,MAAMC,OAAO,GAAG,IAAIH,OAAJ,EAAhB;AAOA,MAAMI,YAAuB,GAAG;AAC9BC,EAAAA,IAAI,EAAEF,OAAO,CAACG,GAAR,CAAkB,MAAlB,CADwB,CAG9B;AACA;AACA;AACA;AACA;AACA;;AAR8B,CAAhC;AAWA,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;AACnCS,EAAAA,IAAI,EAAE,MAD6B;AAEnCJ,EAAAA,YAFmC;AAGnCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAoD;AAC3DD,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACC,OAApB;;AACA,UAAID,MAAM,CAACC,OAAX,EAAoB;AAClBV,QAAAA,OAAO,CAACW,GAAR,CAAY,MAAZ,EAAoBF,MAAM,CAACC,OAA3B,EAAoC;AAClC;AACAE,UAAAA,MAAM,EAAE,IAF0B,CAEpB;;AAFoB,SAApC;AAID,OALD,MAKO;AACLZ,QAAAA,OAAO,CAACa,MAAR,CAAe,MAAf;AACD;AACF;AAXO;AAHyB,CAAD,CAA7B,C,CAkBP;;AACA,OAAO,MAAM;AAAEN,EAAAA;AAAF,IAAcH,SAAS,CAACU,OAA9B,C,CAEP;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACV,IAAD,EAAeW,KAAf,KAA2C,OAC9DC,QAD8D,KAE3D;AACH,QAAMC,QAAQ,GAAG,MAAMpB,SAAS,CAACO,IAAD,EAAOW,KAAP,CAAhC;;AACA,MAAIE,QAAJ,EAAc;AACZD,IAAAA,QAAQ,CACNV,OAAO,CAAC;AACNF,MAAAA,IAAI,EAAEa,QAAQ,CAACb,IADT;AAENW,MAAAA,KAAK,EAAEE,QAAQ,CAACF,KAFV;AAGNG,MAAAA,KAAK,EAAED,QAAQ,CAACC,KAHV;AAINC,MAAAA,WAAW,EAAEF,QAAQ,CAACE,WAJhB;AAKNC,MAAAA,KAAK,EAAEH,QAAQ,CAACG,KALV;AAMNC,MAAAA,UAAU,EAAEJ,QAAQ,CAACI,UANf;AAONC,MAAAA,KAAK,EAAEL,QAAQ,CAACK;AAPV,KAAD,CADD,CAAR;AAWD;AACF,CAjBM,C,CAmBP;;AACA,OAAO,MAAMC,MAAM,GAAG,MAAgB,OAAOP,QAAP,EAAiBQ,QAAjB,KAA8B;AAAA;;AAClE;AACA,QAAMN,KAAK,0BAAGM,QAAQ,GAAGC,IAAX,CAAgBxB,IAAnB,wDAAG,oBAAsBiB,KAApC;AACA,MAAI,CAACA,KAAL,EAAY,OAHsD,CAG9C;;AAEpB,QAAMD,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,KAAD,CAAjC;;AACA,MAAID,QAAJ,EAAc;AACZD,IAAAA,QAAQ,CAACV,OAAO,CAACoB,SAAD,CAAR,CAAR,CADY,CACkB;AAC/B;AACF,CATM,C,CAWP;;AACA,MAAMC,UAAU,GAAIpB,KAAD,IAAsBA,KAAK,CAACkB,IAAN,CAAWxB,IAApD;;AAEA,SAAS0B,UAAT,G,CAEA;;AACA,eAAexB,SAAS,CAACyB,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport Cookies from 'universal-cookie';\nimport { AppThunk, RootState } from '../store'; // TODO\nimport { userLogIn, userLogOut } from '../../apis/index';\nimport { User } from '../../assets/models/User';\n\nconst cookies = new Cookies();\n\ninterface AuthState {\n  user?: User;\n  userDraft?: User;\n}\n\nconst initialState: AuthState = {\n  user: cookies.get<User>('user'),\n  \n  // TODO temp for fake logged in user: {\n  //   name: 'Amit Bar',\n  //   email: \"'noneofyobusiness@gmail.com\",\n  //   imageUrl: 'image',\n  //   token: 'fake',\n  // },\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action: PayloadAction<User | undefined>) => {\n      state.user = action.payload;\n      if (action.payload) {\n        cookies.set('user', action.payload, {\n          // TODO should probably set this from the backend as well (similar to access_token)\n          maxAge: 4320, // expires  72 hours after login\n        });\n      } else {\n        cookies.remove('user');\n      }\n    },\n  },\n});\n\n// Export actions that were defined with createSlice\nexport const { setUser } = authSlice.actions;\n\n// Thunks here\nexport const login = (name: string, email: string): AppThunk => async (\n  dispatch,\n) => {\n  const response = await userLogIn(name, email);\n  if (response) {\n    dispatch(\n      setUser({\n        name: response.name,\n        email: response.email,\n        token: response.token,\n        description: response.description,\n        major: response.major,\n        schoolYear: response.schoolYear,\n        phone: response.phone,\n      }),\n    );\n  }\n};\n\n// TODO this doesn't seem to be able to handle when the cookie times out\nexport const logout = (): AppThunk => async (dispatch, getState) => {\n  // remove cookies here, which will automatically update the user\n  const token = getState().auth.user?.token;\n  if (!token) return; // TODO doesn't work well anymore. I think it's cause we changed the backend\n\n  const response = await userLogOut(token);\n  if (response) {\n    dispatch(setUser(undefined)); // TODO not sure if this is needed\n  }\n};\n\n// Selects here\nconst selectUser = (state: RootState) => state.auth.user;\n\nexport { selectUser };\n\n// Export everything\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}