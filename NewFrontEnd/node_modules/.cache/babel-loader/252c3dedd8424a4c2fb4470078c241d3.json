{"ast":null,"code":"var _jsxFileName = \"/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/SpotifySearchTest.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nconst spotifyApi = new SpotifyWebApi({\n  clientId: '',\n  // TODO make sure to not add the id, secret, or access token to git! otherwise, it'll be public on github\n  clientSecret: '' // accessToken: '',\n\n});\n\nconst SpotifySearchTest = () => {\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    if (search === '') {\n      setSearchResults([]);\n      return;\n    }\n\n    const updateSearchResults = async () => {\n      var _body$tracks;\n\n      const {\n        body\n      } = await spotifyApi.searchTracks(search);\n      const songNames = (_body$tracks = body.tracks) === null || _body$tracks === void 0 ? void 0 : _body$tracks.items.map(item => item.name);\n      console.log(songNames);\n      setSearchResults(songNames || []);\n    };\n\n    updateSearchResults();\n  }, [search]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: e => setSearch(e.currentTarget.value.trim()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, searchResults.map(s => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, s))));\n};\n\nexport default SpotifySearchTest;","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/components/SpotifySearchTest.tsx"],"names":["React","useState","useEffect","SpotifyWebApi","spotifyApi","clientId","clientSecret","SpotifySearchTest","search","setSearch","searchResults","setSearchResults","updateSearchResults","body","searchTracks","songNames","tracks","items","map","item","name","console","log","e","currentTarget","value","trim","s"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AAEA,MAAMC,UAAU,GAAG,IAAID,aAAJ,CAAkB;AACnCE,EAAAA,QAAQ,EAAE,EADyB;AACrB;AACdC,EAAAA,YAAY,EAAE,EAFqB,CAGnC;;AAHmC,CAAlB,CAAnB;;AAMA,MAAMC,iBAA2B,GAAG,MAAM;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAS,EAAT,CAApC;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAQ,EAAR,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,MAAM,KAAK,EAAf,EAAmB;AACjBG,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACA;AACD;;AAED,UAAMC,mBAAmB,GAAG,YAAY;AAAA;;AACtC,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMT,UAAU,CAACU,YAAX,CAAwBN,MAAxB,CAAvB;AACA,YAAMO,SAAS,mBAAGF,IAAI,CAACG,MAAR,iDAAG,aAAaC,KAAb,CAAmBC,GAAnB,CAAwBC,IAAD,IAAUA,IAAI,CAACC,IAAtC,CAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACAJ,MAAAA,gBAAgB,CAACI,SAAS,IAAI,EAAd,CAAhB;AACD,KALD;;AAOAH,IAAAA,mBAAmB;AACpB,GAdQ,EAcN,CAACJ,MAAD,CAdM,CAAT;AAgBA,sBACE,uDACE;AAAO,IAAA,QAAQ,EAAGe,CAAD,IAAOd,SAAS,CAACc,CAAC,CAACC,aAAF,CAAgBC,KAAhB,CAAsBC,IAAtB,EAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,aAAa,CAACQ,GAAd,CAAmBS,CAAD,iBACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,CAAL,CADD,CADH,CAFF,CADF;AAUD,CA9BD;;AAgCA,eAAepB,iBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: '', // TODO make sure to not add the id, secret, or access token to git! otherwise, it'll be public on github\n  clientSecret: '',\n  // accessToken: '',\n});\n\nconst SpotifySearchTest: React.FC = () => {\n  const [search, setSearch] = useState<string>('');\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (search === '') {\n      setSearchResults([]);\n      return;\n    }\n\n    const updateSearchResults = async () => {\n      const { body } = await spotifyApi.searchTracks(search);\n      const songNames = body.tracks?.items.map((item) => item.name);\n      console.log(songNames);\n      setSearchResults(songNames || []);\n    };\n\n    updateSearchResults();\n  }, [search]);\n\n  return (\n    <>\n      <input onChange={(e) => setSearch(e.currentTarget.value.trim())} />\n      <ul>\n        {searchResults.map((s) => (\n          <li>{s}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default SpotifySearchTest;\n"]},"metadata":{},"sourceType":"module"}