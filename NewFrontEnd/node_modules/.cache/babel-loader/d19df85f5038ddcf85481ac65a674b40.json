{"ast":null,"code":"/* eslint-disable @typescript-eslint/camelcase */\nimport { backendAPI } from './apiBases';\n\nconst getHousingPostsAPI = async () => {\n  try {\n    var _result$request;\n\n    const result = await backendAPI.get('/getRoom', {\n      withCredentials: true\n    });\n    console.log(result); // handle errors\n\n    if (((_result$request = result.request) === null || _result$request === void 0 ? void 0 : _result$request.status) !== 200) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst searchHousingPostsAPI = async ({\n  distance,\n  roomType,\n  priceMin,\n  priceMax,\n  earlyInterval,\n  earlyMonth,\n  lateInterval,\n  lateMonth,\n  stayPeriod,\n  other,\n  facilities\n}) => {\n  try {\n    var _result$request2;\n\n    const result = await backendAPI.post('/searchRoom', JSON.stringify({\n      distance,\n      room_type: roomType,\n      price_min: priceMin,\n      price_max: priceMax,\n      early_interval: earlyInterval,\n      early_month: earlyMonth,\n      late_interval: lateInterval,\n      late_month: lateMonth,\n      stay_period: stayPeriod,\n      other,\n      facilities\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(result); // handle errors\n\n    if (((_result$request2 = result.request) === null || _result$request2 === void 0 ? void 0 : _result$request2.status) !== 200) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst newHousingPostAPI = async (roomForm) => {\n  try {\n    var _result$request3;\n\n    const result = await backendAPI.post('/postRoom', roomForm, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      },\n      withCredentials: true\n    });\n    console.log(result, 'get result'); // handle errors\n\n    if (((_result$request3 = result.request) === null || _result$request3 === void 0 ? void 0 : _result$request3.status) !== 201) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst getHousingBookmarksAPI = async () => {\n  try {\n    var _result$request4;\n\n    const result = await backendAPI.get('/bookmark', {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(result);\n    if (((_result$request4 = result.request) === null || _result$request4 === void 0 ? void 0 : _result$request4.status) !== 200) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst addHousingBookmarkAPI = async roomId => {\n  try {\n    var _result$request5;\n\n    const result = await backendAPI.post('/bookmark', JSON.stringify({\n      room_id: roomId,\n      action: 'add'\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(result);\n    if (((_result$request5 = result.request) === null || _result$request5 === void 0 ? void 0 : _result$request5.status) !== 201) throw Error('Bad request');\n    return true;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst removeHousingBookmarkAPI = async roomId => {\n  try {\n    var _result$request6;\n\n    const result = await backendAPI.post('/bookmark', JSON.stringify({\n      room_id: roomId,\n      action: 'remove'\n    }), {\n      headers: {\n        'content-type': 'application/json'\n      },\n      withCredentials: true\n    });\n    console.log(result);\n    if (((_result$request6 = result.request) === null || _result$request6 === void 0 ? void 0 : _result$request6.status) !== 200) throw Error('Bad request');\n    return true;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport { getHousingPostsAPI, searchHousingPostsAPI, newHousingPostAPI, getHousingBookmarksAPI, addHousingBookmarkAPI, removeHousingBookmarkAPI };","map":{"version":3,"sources":["/Users/yijianzong/Documents/GitHub/Housing_Proj/NewFrontEnd/src/apis/housing.ts"],"names":["backendAPI","getHousingPostsAPI","result","get","withCredentials","console","log","request","status","Error","data","err","error","undefined","searchHousingPostsAPI","distance","roomType","priceMin","priceMax","earlyInterval","earlyMonth","lateInterval","lateMonth","stayPeriod","other","facilities","post","JSON","stringify","room_type","price_min","price_max","early_interval","early_month","late_interval","late_month","stay_period","headers","newHousingPostAPI","roomForm","getHousingBookmarksAPI","addHousingBookmarkAPI","roomId","room_id","action","removeHousingBookmarkAPI"],"mappings":"AAAA;AAGA,SAASA,UAAT,QAA2B,YAA3B;;AAEA,MAAMC,kBAAkB,GAAG,YAA8C;AACvE,MAAI;AAAA;;AACF,UAAMC,MAAM,GAAG,MAAMF,UAAU,CAACG,GAAX,CAA4B,UAA5B,EAAwC;AAC3DC,MAAAA,eAAe,EAAE;AAD0C,KAAxC,CAArB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAJE,CAKF;;AACA,QAAI,oBAAAA,MAAM,CAACK,OAAP,oEAAgBC,MAAhB,MAA2B,GAA/B,EAAoC,MAAMC,KAAK,CAAC,aAAD,CAAX;AAEpC,WAAOP,MAAM,CAACQ,IAAd;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACZN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA,WAAOE,SAAP;AACD;AACF,CAdD;;AAgBA,MAAMC,qBAAqB,GAAG,OAAO;AACnCC,EAAAA,QADmC;AAEnCC,EAAAA,QAFmC;AAGnCC,EAAAA,QAHmC;AAInCC,EAAAA,QAJmC;AAKnCC,EAAAA,aALmC;AAMnCC,EAAAA,UANmC;AAOnCC,EAAAA,YAPmC;AAQnCC,EAAAA,SARmC;AASnCC,EAAAA,UATmC;AAUnCC,EAAAA,KAVmC;AAWnCC,EAAAA;AAXmC,CAAP,KAYuB;AACnD,MAAI;AAAA;;AACF,UAAMvB,MAAM,GAAG,MAAMF,UAAU,CAAC0B,IAAX,CACnB,aADmB,EAEnBC,IAAI,CAACC,SAAL,CAAe;AACbb,MAAAA,QADa;AAEbc,MAAAA,SAAS,EAAEb,QAFE;AAGbc,MAAAA,SAAS,EAAEb,QAHE;AAIbc,MAAAA,SAAS,EAAEb,QAJE;AAKbc,MAAAA,cAAc,EAAEb,aALH;AAMbc,MAAAA,WAAW,EAAEb,UANA;AAObc,MAAAA,aAAa,EAAEb,YAPF;AAQbc,MAAAA,UAAU,EAAEb,SARC;AASbc,MAAAA,WAAW,EAAEb,UATA;AAUbC,MAAAA,KAVa;AAWbC,MAAAA;AAXa,KAAf,CAFmB,EAenB;AACEY,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OADX;AAIEjC,MAAAA,eAAe,EAAE;AAJnB,KAfmB,CAArB;AAsBAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAvBE,CAwBF;;AACA,QAAI,qBAAAA,MAAM,CAACK,OAAP,sEAAgBC,MAAhB,MAA2B,GAA/B,EAAoC,MAAMC,KAAK,CAAC,aAAD,CAAX;AAEpC,WAAOP,MAAM,CAACQ,IAAd;AACD,GA5BD,CA4BE,OAAOC,GAAP,EAAY;AACZN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA,WAAOE,SAAP;AACD;AACF,CA7CD;;AA+CA,MAAMyB,iBAAiB,GAAG,OACxBC,QADwB,KAErB;AACH,MAAI;AAAA;;AACF,UAAMrC,MAAM,GAAG,MAAMF,UAAU,CAAC0B,IAAX,CAAgB,WAAhB,EAA6Ba,QAA7B,EAAuC;AAC1DF,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OADiD;AAI1DjC,MAAAA,eAAe,EAAE;AAJyC,KAAvC,CAArB;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoB,YAApB,EAPE,CAQF;;AACA,QAAI,qBAAAA,MAAM,CAACK,OAAP,sEAAgBC,MAAhB,MAA2B,GAA/B,EAAoC,MAAMC,KAAK,CAAC,aAAD,CAAX;AACpC,WAAOP,MAAM,CAACQ,IAAd;AACD,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA,WAAOE,SAAP;AACD;AACF,CAlBD;;AAoBA,MAAM2B,sBAAsB,GAAG,YAAY;AACzC,MAAI;AAAA;;AACF,UAAMtC,MAAM,GAAG,MAAMF,UAAU,CAACG,GAAX,CAA4B,WAA5B,EAAyC;AAC5DkC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OADmD;AAI5DjC,MAAAA,eAAe,EAAE;AAJ2C,KAAzC,CAArB;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,QAAI,qBAAAA,MAAM,CAACK,OAAP,sEAAgBC,MAAhB,MAA2B,GAA/B,EAAoC,MAAMC,KAAK,CAAC,aAAD,CAAX;AAEpC,WAAOP,MAAM,CAACQ,IAAd;AACD,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA,WAAOE,SAAP;AACD;AACF,CAhBD;;AAkBA,MAAM4B,qBAAqB,GAAG,MAAOC,MAAP,IAA0B;AACtD,MAAI;AAAA;;AACF,UAAMxC,MAAM,GAAG,MAAMF,UAAU,CAAC0B,IAAX,CACnB,WADmB,EAEnBC,IAAI,CAACC,SAAL,CAAe;AAAEe,MAAAA,OAAO,EAAED,MAAX;AAAmBE,MAAAA,MAAM,EAAE;AAA3B,KAAf,CAFmB,EAGnB;AACEP,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OADX;AAIEjC,MAAAA,eAAe,EAAE;AAJnB,KAHmB,CAArB;AAUAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,QAAI,qBAAAA,MAAM,CAACK,OAAP,sEAAgBC,MAAhB,MAA2B,GAA/B,EAAoC,MAAMC,KAAK,CAAC,aAAD,CAAX;AAEpC,WAAO,IAAP;AACD,GAfD,CAeE,OAAOE,GAAP,EAAY;AACZN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA,WAAOE,SAAP;AACD;AACF,CApBD;;AAsBA,MAAMgC,wBAAwB,GAAG,MAAOH,MAAP,IAA0B;AACzD,MAAI;AAAA;;AACF,UAAMxC,MAAM,GAAG,MAAMF,UAAU,CAAC0B,IAAX,CACnB,WADmB,EAEnBC,IAAI,CAACC,SAAL,CAAe;AAAEe,MAAAA,OAAO,EAAED,MAAX;AAAmBE,MAAAA,MAAM,EAAE;AAA3B,KAAf,CAFmB,EAGnB;AACEP,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OADX;AAIEjC,MAAAA,eAAe,EAAE;AAJnB,KAHmB,CAArB;AAUAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,QAAI,qBAAAA,MAAM,CAACK,OAAP,sEAAgBC,MAAhB,MAA2B,GAA/B,EAAoC,MAAMC,KAAK,CAAC,aAAD,CAAX;AAEpC,WAAO,IAAP;AACD,GAfD,CAeE,OAAOE,GAAP,EAAY;AACZN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA,WAAOE,SAAP;AACD;AACF,CApBD;;AAsBA,SACEZ,kBADF,EAEEa,qBAFF,EAGEwB,iBAHF,EAIEE,sBAJF,EAKEC,qBALF,EAMEI,wBANF","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\nimport { HousePost } from '../assets/models/PostModels';\nimport { FilterModel } from '../assets/models/FilterModel';\nimport { backendAPI } from './apiBases';\n\nconst getHousingPostsAPI = async (): Promise<HousePost[] | undefined> => {\n  try {\n    const result = await backendAPI.get<HousePost[]>('/getRoom', {\n      withCredentials: true,\n    });\n    console.log(result);\n    // handle errors\n    if (result.request?.status !== 200) throw Error('Bad request');\n\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst searchHousingPostsAPI = async ({\n  distance,\n  roomType,\n  priceMin,\n  priceMax,\n  earlyInterval,\n  earlyMonth,\n  lateInterval,\n  lateMonth,\n  stayPeriod,\n  other,\n  facilities,\n}: FilterModel): Promise<HousePost[] | undefined> => {\n  try {\n    const result = await backendAPI.post(\n      '/searchRoom',\n      JSON.stringify({\n        distance,\n        room_type: roomType,\n        price_min: priceMin,\n        price_max: priceMax,\n        early_interval: earlyInterval,\n        early_month: earlyMonth,\n        late_interval: lateInterval,\n        late_month: lateMonth,\n        stay_period: stayPeriod,\n        other,\n        facilities,\n      }),\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(result);\n    // handle errors\n    if (result.request?.status !== 200) throw Error('Bad request');\n\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst newHousingPostAPI = async (\n  roomForm: HousePost, // TODO\n) => {\n  try {\n    const result = await backendAPI.post('/postRoom', roomForm, {\n      headers: {\n        'content-type': 'multipart/form-data',\n      },\n      withCredentials: true,\n    });\n    console.log(result, 'get result');\n    // handle errors\n    if (result.request?.status !== 201) throw Error('Bad request');\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst getHousingBookmarksAPI = async () => {\n  try {\n    const result = await backendAPI.get<HousePost[]>('/bookmark', {\n      headers: {\n        'content-type': 'application/json',\n      },\n      withCredentials: true,\n    });\n    console.log(result);\n    if (result.request?.status !== 200) throw Error('Bad request');\n\n    return result.data;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst addHousingBookmarkAPI = async (roomId: number) => {\n  try {\n    const result = await backendAPI.post(\n      '/bookmark',\n      JSON.stringify({ room_id: roomId, action: 'add' }),\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(result);\n    if (result.request?.status !== 201) throw Error('Bad request');\n\n    return true;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst removeHousingBookmarkAPI = async (roomId: number) => {\n  try {\n    const result = await backendAPI.post(\n      '/bookmark',\n      JSON.stringify({ room_id: roomId, action: 'remove' }),\n      {\n        headers: {\n          'content-type': 'application/json',\n        },\n        withCredentials: true,\n      },\n    );\n    console.log(result);\n    if (result.request?.status !== 200) throw Error('Bad request');\n\n    return true;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport {\n  getHousingPostsAPI,\n  searchHousingPostsAPI,\n  newHousingPostAPI,\n  getHousingBookmarksAPI,\n  addHousingBookmarkAPI,\n  removeHousingBookmarkAPI,\n};\n"]},"metadata":{},"sourceType":"module"}