{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultErrorMap = void 0;\n\nvar util_1 = require(\"./helpers/util\");\n\nvar ZodError_1 = require(\"./ZodError\");\n\nvar defaultErrorMap = function (error, _ctx) {\n  var message;\n\n  switch (error.code) {\n    case ZodError_1.ZodIssueCode.invalid_type:\n      if (error.received === \"undefined\") {\n        message = \"Required\";\n      } else {\n        message = \"Expected \" + error.expected + \", received \" + error.received;\n      }\n\n      break;\n\n    case ZodError_1.ZodIssueCode.nonempty_array_is_empty:\n      message = \"List must contain at least one item\";\n      break;\n\n    case ZodError_1.ZodIssueCode.unrecognized_keys:\n      message = \"Unrecognized key(s) in object: \" + error.keys.map(function (k) {\n        return \"'\" + k + \"'\";\n      }).join(\", \");\n      break;\n\n    case ZodError_1.ZodIssueCode.invalid_union:\n      message = \"Invalid input\";\n      break;\n\n    case ZodError_1.ZodIssueCode.invalid_literal_value:\n      message = \"Input must be \\\"\" + error.expected + \"\\\"\";\n      break;\n\n    case ZodError_1.ZodIssueCode.invalid_enum_value:\n      message = \"Input must be one of these values: \" + error.options.join(\", \");\n      break;\n\n    case ZodError_1.ZodIssueCode.invalid_arguments:\n      message = \"Invalid function arguments\";\n      break;\n\n    case ZodError_1.ZodIssueCode.invalid_return_type:\n      message = \"Invalid function return type\";\n      break;\n\n    case ZodError_1.ZodIssueCode.invalid_date:\n      message = \"Invalid date\";\n      break;\n\n    case ZodError_1.ZodIssueCode.invalid_string:\n      if (error.validation !== \"regex\") message = \"Invalid \" + error.validation;else message = \"Invalid\";\n      break;\n\n    case ZodError_1.ZodIssueCode.too_small:\n      if (error.type === \"array\") message = \"Should have \" + (error.inclusive ? \"at least\" : \"more than\") + \" \" + error.minimum + \" items\";else if (error.type === \"string\") message = \"Should be \" + (error.inclusive ? \"at least\" : \"over\") + \" \" + error.minimum + \" characters\";else if (error.type === \"number\") message = \"Value should be greater than \" + (error.inclusive ? \"or equal to \" : \"\") + error.minimum;else message = \"Invalid input\";\n      break;\n\n    case ZodError_1.ZodIssueCode.too_big:\n      if (error.type === \"array\") message = \"Should have \" + (error.inclusive ? \"at most\" : \"less than\") + \" \" + error.maximum + \" items\";else if (error.type === \"string\") message = \"Should be \" + (error.inclusive ? \"at most\" : \"under\") + \" \" + error.maximum + \" characters long\";else if (error.type === \"number\") message = \"Value should be less than \" + (error.inclusive ? \"or equal to \" : \"\") + error.maximum;else message = \"Invalid input\";\n      break;\n\n    case ZodError_1.ZodIssueCode.custom:\n      message = \"Invalid input.\";\n      break;\n\n    case ZodError_1.ZodIssueCode.invalid_intersection_types:\n      message = \"Intersections only support objects\";\n      break;\n\n    default:\n      message = \"Invalid input.\";\n      util_1.util.assertNever(error);\n  }\n\n  return {\n    message: message\n  };\n};\n\nexports.defaultErrorMap = defaultErrorMap;","map":{"version":3,"sources":["../../src/defaultErrorMap.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultErrorMap = void 0;\nvar util_1 = require(\"./helpers/util\");\nvar ZodError_1 = require(\"./ZodError\");\nvar defaultErrorMap = function (error, _ctx) {\n    var message;\n    switch (error.code) {\n        case ZodError_1.ZodIssueCode.invalid_type:\n            if (error.received === \"undefined\") {\n                message = \"Required\";\n            }\n            else {\n                message = \"Expected \" + error.expected + \", received \" + error.received;\n            }\n            break;\n        case ZodError_1.ZodIssueCode.nonempty_array_is_empty:\n            message = \"List must contain at least one item\";\n            break;\n        case ZodError_1.ZodIssueCode.unrecognized_keys:\n            message = \"Unrecognized key(s) in object: \" + error.keys\n                .map(function (k) { return \"'\" + k + \"'\"; })\n                .join(\", \");\n            break;\n        case ZodError_1.ZodIssueCode.invalid_union:\n            message = \"Invalid input\";\n            break;\n        case ZodError_1.ZodIssueCode.invalid_literal_value:\n            message = \"Input must be \\\"\" + error.expected + \"\\\"\";\n            break;\n        case ZodError_1.ZodIssueCode.invalid_enum_value:\n            message = \"Input must be one of these values: \" + error.options.join(\", \");\n            break;\n        case ZodError_1.ZodIssueCode.invalid_arguments:\n            message = \"Invalid function arguments\";\n            break;\n        case ZodError_1.ZodIssueCode.invalid_return_type:\n            message = \"Invalid function return type\";\n            break;\n        case ZodError_1.ZodIssueCode.invalid_date:\n            message = \"Invalid date\";\n            break;\n        case ZodError_1.ZodIssueCode.invalid_string:\n            if (error.validation !== \"regex\")\n                message = \"Invalid \" + error.validation;\n            else\n                message = \"Invalid\";\n            break;\n        case ZodError_1.ZodIssueCode.too_small:\n            if (error.type === \"array\")\n                message = \"Should have \" + (error.inclusive ? \"at least\" : \"more than\") + \" \" + error.minimum + \" items\";\n            else if (error.type === \"string\")\n                message = \"Should be \" + (error.inclusive ? \"at least\" : \"over\") + \" \" + error.minimum + \" characters\";\n            else if (error.type === \"number\")\n                message = \"Value should be greater than \" + (error.inclusive ? \"or equal to \" : \"\") + error.minimum;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodError_1.ZodIssueCode.too_big:\n            if (error.type === \"array\")\n                message = \"Should have \" + (error.inclusive ? \"at most\" : \"less than\") + \" \" + error.maximum + \" items\";\n            else if (error.type === \"string\")\n                message = \"Should be \" + (error.inclusive ? \"at most\" : \"under\") + \" \" + error.maximum + \" characters long\";\n            else if (error.type === \"number\")\n                message = \"Value should be less than \" + (error.inclusive ? \"or equal to \" : \"\") + error.maximum;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodError_1.ZodIssueCode.custom:\n            message = \"Invalid input.\";\n            break;\n        case ZodError_1.ZodIssueCode.invalid_intersection_types:\n            message = \"Intersections only support objects\";\n            break;\n        default:\n            message = \"Invalid input.\";\n            util_1.util.assertNever(error);\n    }\n    return { message: message };\n};\nexports.defaultErrorMap = defaultErrorMap;\n//# sourceMappingURL=defaultErrorMap.js.map"]},"metadata":{},"sourceType":"script"}